{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { FragmentDefiner, useReadFragment } from \"../../../GlobalHooks/useReadFragment\";\nimport { isTemporal } from \"../../../Utils/Functions\";\nimport { useFilters } from \"../Filters.hook\";\nexport var FRAGMENT_PROPERTYTYPES_OPTIONS = new FragmentDefiner(\"Filter\", \"\\n\\t\\tid\\n\\t\\tname\\n\\t\\toptions\\n  \");\nexport var FRAGMENT_PROPERTYTYPES = new FragmentDefiner(\"Filters\", \"\\n\\t\\tpropertyType {\\n\\t\\t  \".concat(FRAGMENT_PROPERTYTYPES_OPTIONS.query(), \"\\n\\t\\t}\\n  \"));\n\nvar usePropertyType = function usePropertyType(props) {\n  _s();\n\n  var _useFilters = useFilters(),\n      filters = _useFilters.filters,\n      changeFilters = _useFilters.changeFilters;\n\n  var _props$labeled = props.labeled,\n      labeled = _props$labeled === void 0 ? false : _props$labeled,\n      _props$selectedValue = props.selectedValue,\n      selectedValue = _props$selectedValue === void 0 ? filters === null || filters === void 0 ? void 0 : filters.property_type_id : _props$selectedValue,\n      _props$inputType = props.inputType,\n      inputType = _props$inputType === void 0 ? \"select\" : _props$inputType,\n      _props$currentFilters = props.currentFilters,\n      currentFilters = _props$currentFilters === void 0 ? filters : _props$currentFilters,\n      _props$filterChanged = props.filterChanged,\n      filterChanged = _props$filterChanged === void 0 ? changeFilters : _props$filterChanged;\n\n  var _useReadFragment = useReadFragment(FRAGMENT_PROPERTYTYPES_OPTIONS, \"propertyType\"),\n      loading = _useReadFragment.loading,\n      data = _useReadFragment.data,\n      error = _useReadFragment.error;\n\n  var onChange = function onChange(newValue) {\n    var res = [];\n\n    if (newValue != null) {\n      res = newValue.map(function (v) {\n        return {\n          value: v[\"property_type_id\"],\n          text: v[\"name\"]\n        };\n      });\n    }\n\n    filterChanged({\n      property_type_id: res\n    });\n  };\n\n  var type = \"multiple\";\n  return {\n    loading: loading,\n    data: {\n      options: isTemporal(filters.operation_type_id) ? data === null || data === void 0 ? void 0 : data.options.filter(function (e) {\n        return e.id == 1 || e.id == 2;\n      }) : data === null || data === void 0 ? void 0 : data.options,\n      onChange: onChange,\n      value: selectedValue,\n      type: type,\n      customKey: \"property_type_id\"\n    },\n    error: error,\n    show: true,\n    labeled: labeled,\n    label: data === null || data === void 0 ? void 0 : data.name,\n    inputType: inputType\n  };\n};\n\n_s(usePropertyType, \"vFO5IQNWjfdOQQaPxFLXZJTUi3Q=\", false, function () {\n  return [useFilters, useReadFragment];\n});\n\nexport { usePropertyType };","map":{"version":3,"sources":["/home/ansina/jsStuff/infocasas-landings/shared-components/Components/Filters/PropertyType/PropertyType.hook.tsx"],"names":["FragmentDefiner","useReadFragment","isTemporal","useFilters","FRAGMENT_PROPERTYTYPES_OPTIONS","FRAGMENT_PROPERTYTYPES","query","usePropertyType","props","filters","changeFilters","labeled","selectedValue","property_type_id","inputType","currentFilters","filterChanged","loading","data","error","onChange","newValue","res","map","v","value","text","type","options","operation_type_id","filter","e","id","customKey","show","label","name"],"mappings":";;AACA,SAASA,eAAT,EAA0BC,eAA1B,QAAiD,sCAAjD;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,SAASC,UAAT,QAA2B,iBAA3B;AAEA,OAAO,IAAMC,8BAA8B,GAAG,IAAIJ,eAAJ,CAC7C,QAD6C,wCAAvC;AAQP,OAAO,IAAMK,sBAAsB,GAAG,IAAIL,eAAJ,CACrC,SADqC,wCAIhCI,8BAA8B,CAACE,KAA/B,EAJgC,iBAA/B;;AASP,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAAA;;AAAA,oBACGL,UAAU,EADb;AAAA,MACxBM,OADwB,eACxBA,OADwB;AAAA,MACfC,aADe,eACfA,aADe;;AAAA,uBAQ5BF,KAR4B,CAG/BG,OAH+B;AAAA,MAG/BA,OAH+B,+BAGrB,KAHqB;AAAA,6BAQ5BH,KAR4B,CAI/BI,aAJ+B;AAAA,MAI/BA,aAJ+B,qCAIfH,OAJe,aAIfA,OAJe,uBAIfA,OAAO,CAAEI,gBAJM;AAAA,yBAQ5BL,KAR4B,CAK/BM,SAL+B;AAAA,MAK/BA,SAL+B,iCAKnB,QALmB;AAAA,8BAQ5BN,KAR4B,CAM/BO,cAN+B;AAAA,MAM/BA,cAN+B,sCAMdN,OANc;AAAA,6BAQ5BD,KAR4B,CAO/BQ,aAP+B;AAAA,MAO/BA,aAP+B,qCAOfN,aAPe;;AAAA,yBAUCT,eAAe,CAC/CG,8BAD+C,EAE/C,cAF+C,CAVhB;AAAA,MAUxBa,OAVwB,oBAUxBA,OAVwB;AAAA,MAUfC,IAVe,oBAUfA,IAVe;AAAA,MAUTC,KAVS,oBAUTA,KAVS;;AAehC,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,QAAQ,EAAI;AAC5B,QAAIC,GAAG,GAAG,EAAV;;AACA,QAAID,QAAQ,IAAI,IAAhB,EAAsB;AACrBC,MAAAA,GAAG,GAAGD,QAAQ,CAACE,GAAT,CAAa,UAAAC,CAAC,EAAI;AACvB,eAAO;AAAEC,UAAAA,KAAK,EAAED,CAAC,CAAC,kBAAD,CAAV;AAAgCE,UAAAA,IAAI,EAAEF,CAAC,CAAC,MAAD;AAAvC,SAAP;AACA,OAFK,CAAN;AAGA;;AACDR,IAAAA,aAAa,CAAC;AAAEH,MAAAA,gBAAgB,EAAES;AAApB,KAAD,CAAb;AACA,GARD;;AAUA,MAAMK,IAAiB,GAAG,UAA1B;AACA,SAAO;AACNV,IAAAA,OAAO,EAAEA,OADH;AAENC,IAAAA,IAAI,EAAE;AACLU,MAAAA,OAAO,EAAE1B,UAAU,CAACO,OAAO,CAACoB,iBAAT,CAAV,GAAwCX,IAAxC,aAAwCA,IAAxC,uBAAwCA,IAAI,CAAEU,OAAN,CAAcE,MAAd,CAAqB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAF,IAAQ,CAAR,IAAaD,CAAC,CAACC,EAAF,IAAQ,CAAzB;AAAA,OAAtB,CAAxC,GAA4Fd,IAA5F,aAA4FA,IAA5F,uBAA4FA,IAAI,CAAEU,OADtG;AAELR,MAAAA,QAAQ,EAARA,QAFK;AAGLK,MAAAA,KAAK,EAAEb,aAHF;AAILe,MAAAA,IAAI,EAAEA,IAJD;AAKLM,MAAAA,SAAS,EAAE;AALN,KAFA;AASNd,IAAAA,KAAK,EAAEA,KATD;AAUNe,IAAAA,IAAI,EAAE,IAVA;AAWNvB,IAAAA,OAAO,EAAPA,OAXM;AAYNwB,IAAAA,KAAK,EAAEjB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEkB,IAZP;AAaNtB,IAAAA,SAAS,EAATA;AAbM,GAAP;AAeA,CAzCD;;GAAMP,e;UAC8BJ,U,EASFF,e;;;AAiClC,SAASM,eAAT","sourcesContent":["import { useEffect } from \"react\";\nimport { FragmentDefiner, useReadFragment } from \"../../../GlobalHooks/useReadFragment\";\nimport { isTemporal } from \"../../../Utils/Functions\";\nimport { SelectTypes } from \"../../Inputs/Selects/Selects.hook\";\nimport { useFilters } from \"../Filters.hook\";\n\nexport const FRAGMENT_PROPERTYTYPES_OPTIONS = new FragmentDefiner(\n\t\"Filter\",\n\t`\n\t\tid\n\t\tname\n\t\toptions\n  `\n);\nexport const FRAGMENT_PROPERTYTYPES = new FragmentDefiner(\n\t\"Filters\",\n\t`\n\t\tpropertyType {\n\t\t  ${FRAGMENT_PROPERTYTYPES_OPTIONS.query()}\n\t\t}\n  `\n);\n\nconst usePropertyType = props => {\n\tconst { filters, changeFilters } = useFilters();\n\tconst {\n\t\tlabeled = false,\n\t\tselectedValue = filters?.property_type_id,\n\t\tinputType = \"select\",\n\t\tcurrentFilters = filters,\n\t\tfilterChanged = changeFilters,\n\t} = props;\n\n\tconst { loading, data, error } = useReadFragment(\n\t\tFRAGMENT_PROPERTYTYPES_OPTIONS,\n\t\t\"propertyType\"\n\t);\n\n\tconst onChange = newValue => {\n\t\tlet res = [];\n\t\tif (newValue != null) {\n\t\t\tres = newValue.map(v => {\n\t\t\t\treturn { value: v[\"property_type_id\"], text: v[\"name\"] };\n\t\t\t});\n\t\t}\n\t\tfilterChanged({ property_type_id: res });\n\t};\n\n\tconst type: SelectTypes = \"multiple\";\n\treturn {\n\t\tloading: loading,\n\t\tdata: {\n\t\t\toptions: isTemporal(filters.operation_type_id) ? data?.options.filter(e => e.id == 1 || e.id == 2) : data?.options,\n\t\t\tonChange,\n\t\t\tvalue: selectedValue,\n\t\t\ttype: type,\n\t\t\tcustomKey: \"property_type_id\",\n\t\t},\n\t\terror: error,\n\t\tshow: true,\n\t\tlabeled,\n\t\tlabel: data?.name,\n\t\tinputType,\n\t};\n};\n\nexport { usePropertyType };\n"]},"metadata":{},"sourceType":"module"}