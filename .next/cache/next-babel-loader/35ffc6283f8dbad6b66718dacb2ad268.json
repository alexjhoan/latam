{"ast":null,"code":"import { useContext } from \"react\";\nimport { FiltersDispatchContext, FiltersStateContext } from \"../../Contexts/Filters/context\";\nimport { isTemporal, showBedrooms, showBathrooms, showRooms, showPropState, isRent, showFloors, showDispositions, showFacilities } from \"../../Utils/Functions\";\n\nconst getOnlyValues = a => {\n  if (a == null || !a) return null;\n  return Object.keys(a).reduce((acc, o) => {\n    if (a[o] == null) {\n      acc[o] = null;\n    } else if (Array.isArray(a[o])) {\n      if (a[o].length > 0) {\n        acc[o] = a[o].map(j => j.value);\n      } else {\n        acc[o] = [];\n      }\n    } else if (a[o].value != null) {\n      acc[o] = a[o].value;\n    } else if (typeof a[o] == \"string\" && a[o] != \"\") {\n      acc[o] = a[o];\n    }\n\n    return acc;\n  }, {});\n};\n\nconst useFilters = () => {\n  const filters = useContext(FiltersStateContext);\n  const dispatch = useContext(FiltersDispatchContext);\n\n  const changeFilters = new_filters => {\n    if (\"operation_type_id\" in new_filters) {\n      if (isTemporal(new_filters.operation_type_id.value)) {\n        if (filters.property_type_id) {\n          new_filters.property_type_id = filters.property_type_id.filter(e => e.value == 1 || e.value == 2);\n        }\n\n        new_filters.m2Min = null;\n        new_filters.m2Max = null;\n        new_filters.m2Type = null;\n      }\n\n      if (!isTemporal(new_filters.operation_type_id.value)) {\n        new_filters.season = null;\n        new_filters.dateFrom = null;\n        new_filters.dateTo = null;\n        new_filters.guests = null;\n      }\n\n      if (!isRent(new_filters.operation_type_id.value)) {\n        new_filters.commonExpenses = null;\n      }\n    }\n\n    if (\"property_type_id\" in new_filters) {\n      let properties = new_filters.property_type_id.map(e => e.value);\n      let operation = filters.operation_type_id.value;\n\n      if (!showBedrooms(properties, operation)) {\n        new_filters.bedrooms = null;\n      }\n\n      if (!showBathrooms(properties, operation)) {\n        new_filters.bathrooms = null;\n      }\n\n      if (!showRooms(properties, operation)) {\n        new_filters.rooms = null;\n      }\n\n      if (!showPropState(properties, operation)) {\n        new_filters.constStatesID = null;\n      }\n\n      if (!showFloors(properties)) {\n        new_filters.floors = null;\n      }\n\n      if (!showDispositions(properties)) {\n        new_filters.dispositionID = null;\n      }\n\n      if (!showFacilities(properties, operation)) {\n        new_filters.facilitiesGroup = null;\n      }\n    }\n\n    return dispatch({\n      type: \"merge\",\n      payload: new_filters\n    });\n  };\n\n  return {\n    filters: getOnlyValues(filters),\n    filtersTags: filters,\n    changeFilters\n  };\n};\n\nexport { useFilters };","map":{"version":3,"sources":["/home/ansina/jsStuff/infocasas-landings/shared-components/Components/Filters/Filters.hook.tsx"],"names":["useContext","FiltersDispatchContext","FiltersStateContext","isTemporal","showBedrooms","showBathrooms","showRooms","showPropState","isRent","showFloors","showDispositions","showFacilities","getOnlyValues","a","Object","keys","reduce","acc","o","Array","isArray","length","map","j","value","useFilters","filters","dispatch","changeFilters","new_filters","operation_type_id","property_type_id","filter","e","m2Min","m2Max","m2Type","season","dateFrom","dateTo","guests","commonExpenses","properties","operation","bedrooms","bathrooms","rooms","constStatesID","floors","dispositionID","facilitiesGroup","type","payload","filtersTags"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport {\n\tFiltersDispatchContext,\n\tFiltersStateContext,\n} from \"../../Contexts/Filters/context\";\nimport { Filters, FiltersValues } from \"../../Contexts/Filters/model\";\nimport { isTemporal, isSell, showBedrooms, showBathrooms, showRooms, showM2, showPropState, isRent, showFloors, showDispositions, showFacilities } from \"../../Utils/Functions\";\n\nconst getOnlyValues = (a): FiltersValues => {\n\tif (a == null || !a) return null;\n\treturn Object.keys(a).reduce((acc, o) => {\n\t\tif (a[o] == null) {\n\t\t\tacc[o] = null;\n\t\t} else if (Array.isArray(a[o])) {\n\t\t\tif (a[o].length > 0) {\n\t\t\t\tacc[o] = a[o].map(j => j.value);\n\t\t\t} else {\n\t\t\t\tacc[o] = [];\n\t\t\t}\n\t\t} else if (a[o].value != null) {\n\t\t\tacc[o] = a[o].value;\n\t\t} else if (typeof a[o] == \"string\" && a[o] != \"\"){\n\t\t\tacc[o] = a[o]\n\t\t}\n\t\treturn acc;\n\t}, {});\n\n};\n\nconst useFilters = () => {\n\tconst filters = useContext(FiltersStateContext);\n\tconst dispatch = useContext(FiltersDispatchContext);\n\n\tconst changeFilters = (new_filters: Filters) => {\n\t\tif(\"operation_type_id\" in new_filters){\n\t\t\tif(isTemporal(new_filters.operation_type_id.value)){\n\t\t\t\tif(filters.property_type_id){\n\t\t\t\t\tnew_filters.property_type_id = filters.property_type_id.filter(e => e.value == 1 || e.value == 2);\n\t\t\t\t}\n\t\t\t\tnew_filters.m2Min = null;\n\t\t\t\tnew_filters.m2Max = null;\n\t\t\t\tnew_filters.m2Type = null;\n\t\t\t}\n\n\t\t\tif(!isTemporal(new_filters.operation_type_id.value)){\n\t\t\t\tnew_filters.season = null;\n\t\t\t\tnew_filters.dateFrom = null;\n\t\t\t\tnew_filters.dateTo = null;\n\t\t\t\tnew_filters.guests = null;\n\t\t\t}\n\n\t\t\tif(!isRent(new_filters.operation_type_id.value)){\n\t\t\t\tnew_filters.commonExpenses = null;\n\t\t\t}\n\t\t}\n\n\t\tif(\"property_type_id\" in new_filters){\n\t\t\tlet properties = new_filters.property_type_id.map(e => e.value);\n\t\t\tlet operation = filters.operation_type_id.value;\n\n\t\t\tif(!showBedrooms(properties, operation)){\n\t\t\t\tnew_filters.bedrooms = null;\n\t\t\t}\n\n\t\t\tif(!showBathrooms(properties, operation)){\n\t\t\t\tnew_filters.bathrooms = null;\n\t\t\t}\n\n\t\t\tif(!showRooms(properties, operation)){\n\t\t\t\tnew_filters.rooms = null;\n\t\t\t}\n\n\t\t\tif(!showPropState(properties, operation)){\n\t\t\t\tnew_filters.constStatesID = null;\n\t\t\t}\n\n\t\t\tif(!showFloors(properties)){\n\t\t\t\tnew_filters.floors = null;\n\t\t\t}\n\n\t\t\tif(!showDispositions(properties)){\n\t\t\t\tnew_filters.dispositionID = null;\n\t\t\t}\n\n\t\t\tif(!showFacilities(properties, operation)){\n\t\t\t\tnew_filters.facilitiesGroup = null;\n\t\t\t}\n\t\t}\n\n\t\treturn dispatch({ type: \"merge\", payload: new_filters });\n\t};\n\n\treturn {\n\t\tfilters: getOnlyValues(filters),\n\t\tfiltersTags: filters,\n\t\tchangeFilters,\n\t};\n};\n\n\nexport { useFilters };\n"]},"metadata":{},"sourceType":"module"}