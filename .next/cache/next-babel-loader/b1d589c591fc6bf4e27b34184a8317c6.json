{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { FragmentDefiner, useReadFragment } from \"../../../GlobalHooks/useReadFragment\";\nimport { useFilters } from \"../Filters.hook\";\nvar FRAGMENT_OPERATIONTYPES_OPTIONS = new FragmentDefiner(\"Filter\", \"\\n      id\\n      name\\n      options\\n\");\nexport var FRAGMENT_OPERATIONTYPES = new FragmentDefiner(\"Filters\", \"\\n    operationType {\\n      \".concat(FRAGMENT_OPERATIONTYPES_OPTIONS.query(), \"\\n    }\\n\"));\n\nvar useOperationType = function useOperationType(props) {\n  _s();\n\n  var _useFilters = useFilters(),\n      filters = _useFilters.filters,\n      changeFilters = _useFilters.changeFilters;\n\n  var _props$labeled = props.labeled,\n      labeled = _props$labeled === void 0 ? false : _props$labeled,\n      _props$selectedValue = props.selectedValue,\n      selectedValue = _props$selectedValue === void 0 ? filters === null || filters === void 0 ? void 0 : filters.operation_type_id : _props$selectedValue,\n      _props$inputType = props.inputType,\n      inputType = _props$inputType === void 0 ? \"select\" : _props$inputType,\n      _props$currentFilters = props.currentFilters,\n      currentFilters = _props$currentFilters === void 0 ? filters : _props$currentFilters,\n      _props$filterChanged = props.filterChanged,\n      filterChanged = _props$filterChanged === void 0 ? changeFilters : _props$filterChanged;\n\n  var _useReadFragment = useReadFragment(FRAGMENT_OPERATIONTYPES_OPTIONS, \"operationType\"),\n      loading = _useReadFragment.loading,\n      data = _useReadFragment.data,\n      error = _useReadFragment.error;\n\n  var onChange = function onChange(newOperation) {\n    filterChanged({\n      operation_type_id: newOperation ? {\n        value: newOperation.operation_type_id,\n        text: newOperation.name\n      } : null\n    });\n  };\n\n  return {\n    loading: loading,\n    error: error,\n    data: {\n      options: data === null || data === void 0 ? void 0 : data.options,\n      value: selectedValue,\n      onChange: onChange,\n      customKey: \"operation_type_id\"\n    },\n    show: true,\n    labeled: labeled,\n    label: data === null || data === void 0 ? void 0 : data.name,\n    inputType: inputType\n  };\n};\n\n_s(useOperationType, \"vFO5IQNWjfdOQQaPxFLXZJTUi3Q=\", false, function () {\n  return [useFilters, useReadFragment];\n});\n\nexport { useOperationType };","map":{"version":3,"sources":["/home/ansina/jsStuff/infocasas-landings/shared-components/Components/Filters/OperationType/OperationType.hook.tsx"],"names":["FragmentDefiner","useReadFragment","useFilters","FRAGMENT_OPERATIONTYPES_OPTIONS","FRAGMENT_OPERATIONTYPES","query","useOperationType","props","filters","changeFilters","labeled","selectedValue","operation_type_id","inputType","currentFilters","filterChanged","loading","data","error","onChange","newOperation","value","text","name","options","customKey","show","label"],"mappings":";;AACA,SAASA,eAAT,EAA0BC,eAA1B,QAAiD,sCAAjD;AACA,SAASC,UAAT,QAA2B,iBAA3B;AAEA,IAAMC,+BAA+B,GAAG,IAAIH,eAAJ,CACvC,QADuC,4CAAxC;AAQA,OAAO,IAAMI,uBAAuB,GAAG,IAAIJ,eAAJ,CACtC,SADsC,yCAI/BG,+BAA+B,CAACE,KAAhC,EAJ+B,eAAhC;;AASP,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,KAAK,EAAI;AAAA;;AAAA,oBACEL,UAAU,EADZ;AAAA,MACzBM,OADyB,eACzBA,OADyB;AAAA,MAChBC,aADgB,eAChBA,aADgB;;AAAA,uBAQ7BF,KAR6B,CAGhCG,OAHgC;AAAA,MAGhCA,OAHgC,+BAGtB,KAHsB;AAAA,6BAQ7BH,KAR6B,CAIhCI,aAJgC;AAAA,MAIhCA,aAJgC,qCAIhBH,OAJgB,aAIhBA,OAJgB,uBAIhBA,OAAO,CAAEI,iBAJO;AAAA,yBAQ7BL,KAR6B,CAKhCM,SALgC;AAAA,MAKhCA,SALgC,iCAKpB,QALoB;AAAA,8BAQ7BN,KAR6B,CAMhCO,cANgC;AAAA,MAMhCA,cANgC,sCAMfN,OANe;AAAA,6BAQ7BD,KAR6B,CAOhCQ,aAPgC;AAAA,MAOhCA,aAPgC,qCAOhBN,aAPgB;;AAAA,yBASAR,eAAe,CAC/CE,+BAD+C,EAE/C,eAF+C,CATf;AAAA,MASzBa,OATyB,oBASzBA,OATyB;AAAA,MAShBC,IATgB,oBAShBA,IATgB;AAAA,MASVC,KATU,oBASVA,KATU;;AAcjC,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,YAAY,EAAI;AAChCL,IAAAA,aAAa,CAAC;AACbH,MAAAA,iBAAiB,EAAEQ,YAAY,GAC5B;AAAEC,QAAAA,KAAK,EAAED,YAAY,CAACR,iBAAtB;AAAyCU,QAAAA,IAAI,EAAEF,YAAY,CAACG;AAA5D,OAD4B,GAE5B;AAHU,KAAD,CAAb;AAKA,GAND;;AAQA,SAAO;AACNP,IAAAA,OAAO,EAAEA,OADH;AAENE,IAAAA,KAAK,EAAEA,KAFD;AAGND,IAAAA,IAAI,EAAE;AACLO,MAAAA,OAAO,EAAEP,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEO,OADV;AAELH,MAAAA,KAAK,EAAEV,aAFF;AAGLQ,MAAAA,QAAQ,EAARA,QAHK;AAILM,MAAAA,SAAS,EAAE;AAJN,KAHA;AASNC,IAAAA,IAAI,EAAE,IATA;AAUNhB,IAAAA,OAAO,EAAPA,OAVM;AAWNiB,IAAAA,KAAK,EAAEV,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEM,IAXP;AAYNV,IAAAA,SAAS,EAATA;AAZM,GAAP;AAcA,CApCD;;GAAMP,gB;UAC8BJ,U,EAQFD,e;;;AA6BlC,SAASK,gBAAT","sourcesContent":["import { SelectTypes } from \"../../Inputs/Selects/Selects.hook\";\nimport { FragmentDefiner, useReadFragment } from \"../../../GlobalHooks/useReadFragment\";\nimport { useFilters } from \"../Filters.hook\";\n\nconst FRAGMENT_OPERATIONTYPES_OPTIONS = new FragmentDefiner(\n\t\"Filter\",\n\t`\n      id\n      name\n      options\n`\n);\nexport const FRAGMENT_OPERATIONTYPES = new FragmentDefiner(\n\t\"Filters\",\n\t`\n    operationType {\n      ${FRAGMENT_OPERATIONTYPES_OPTIONS.query()}\n    }\n`\n);\n\nconst useOperationType = props => {\n\tconst { filters, changeFilters } = useFilters();\n\tconst {\n\t\tlabeled = false,\n\t\tselectedValue = filters?.operation_type_id,\n\t\tinputType = \"select\",\n\t\tcurrentFilters = filters,\n\t\tfilterChanged = changeFilters,\n\t} = props;\n\tconst { loading, data, error } = useReadFragment(\n\t\tFRAGMENT_OPERATIONTYPES_OPTIONS,\n\t\t\"operationType\"\n\t);\n\n\tconst onChange = newOperation => {\n\t\tfilterChanged({\n\t\t\toperation_type_id: newOperation\n\t\t\t\t? { value: newOperation.operation_type_id, text: newOperation.name }\n\t\t\t\t: null,\n\t\t});\n\t};\n\n\treturn {\n\t\tloading: loading,\n\t\terror: error,\n\t\tdata: {\n\t\t\toptions: data?.options,\n\t\t\tvalue: selectedValue,\n\t\t\tonChange,\n\t\t\tcustomKey: \"operation_type_id\",\n\t\t},\n\t\tshow: true,\n\t\tlabeled,\n\t\tlabel: data?.name,\n\t\tinputType,\n\t};\n};\n\nexport { useOperationType };\n"]},"metadata":{},"sourceType":"module"}