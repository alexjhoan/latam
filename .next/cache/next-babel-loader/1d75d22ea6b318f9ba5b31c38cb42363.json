{"ast":null,"code":"var _jsxFileName = \"/home/ansina/jsStuff/infocasas-landings/shared-components/Contexts/Configurations/context.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createContext, useReducer } from \"react\";\nconst ConfigStateContext = createContext({});\nconst ConfigDispatchContext = createContext(null);\nconst defaultState = {};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'merge':\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'reset':\n      return _objectSpread({}, defaultState);\n\n    default:\n      throw new Error(\"no funciona\");\n  }\n};\n\nconst ConfigurationsProvider = ({\n  children,\n  initialState = null,\n  active\n}) => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, initialState == null ? defaultState : initialState);\n\n  if (!active) {\n    return __jsx(React.Fragment, null, children);\n  }\n\n  return __jsx(ConfigDispatchContext.Provider, {\n    value: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, __jsx(ConfigStateContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, children));\n};\n\nexport { ConfigStateContext, ConfigDispatchContext, ConfigurationsProvider };","map":{"version":3,"sources":["/home/ansina/jsStuff/infocasas-landings/shared-components/Contexts/Configurations/context.tsx"],"names":["createContext","useReducer","ConfigStateContext","ConfigDispatchContext","defaultState","reducer","state","action","type","payload","Error","ConfigurationsProvider","children","initialState","active","dispatch"],"mappings":";;;;;;;;;;AAAA,SAAQA,aAAR,EAAkCC,UAAlC,QAA8D,OAA9D;AAQA,MAAMC,kBAAkB,GAAGF,aAAa,CAAU,EAAV,CAAxC;AACA,MAAMG,qBAAqB,GAAGH,aAAa,CAAC,IAAD,CAA3C;AAEA,MAAMI,YAAsB,GAAG,EAA/B;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAkBC,MAAlB,KAAuC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,OAAL;AACI,6CAAWF,KAAX,GAAqBC,MAAM,CAACE,OAA5B;;AACJ,SAAK,OAAL;AACI,+BAAWL,YAAX;;AACJ;AACI,YAAM,IAAIM,KAAJ,CAAU,aAAV,CAAN;AANR;AAQH,CATD;;AAWA,MAAMC,sBAAsB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,YAAY,GAAG,IAA3B;AAAiCC,EAAAA;AAAjC,CAAD,KAAgH;AAE3I,QAAM;AAAA,OAACR,KAAD;AAAA,OAAQS;AAAR,MAAoBd,UAAU,CAACI,OAAD,EAASQ,YAAY,IAAI,IAAhB,GAAqBT,YAArB,GAAkCS,YAA3C,CAApC;;AAEA,MAAG,CAACC,MAAJ,EAAY;AACR,WAAQ,4BAAGF,QAAH,CAAR;AACH;;AAGD,SAEI,MAAC,qBAAD,CAAuB,QAAvB;AAAgC,IAAA,KAAK,EAAEG,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAET,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKM,QADL,CADJ,CAFJ;AASH,CAlBD;;AAoBA,SAAQV,kBAAR,EAA4BC,qBAA5B,EAAmDQ,sBAAnD","sourcesContent":["import {createContext, ReactNode, useReducer, useEffect} from \"react\";\nimport {Configs} from \"./model\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/client\";\n\n\n\n\nconst ConfigStateContext = createContext<Configs>({});\nconst ConfigDispatchContext = createContext(null);\n\nconst defaultState : Configs = {};\n\nconst reducer = (state : Configs, action) : Configs => {\n    switch (action.type) {\n        case 'merge':\n            return {...state, ...action.payload};\n        case 'reset':\n            return {...defaultState};\n        default:\n            throw new Error(\"no funciona\");\n    }\n};\n\nconst ConfigurationsProvider = ({ children, initialState = null, active } : {children: ReactNode, initialState : Configs, active: boolean}) => {\n\n    const [state, dispatch] = useReducer(reducer,initialState == null?defaultState:initialState);\n\n    if(!active) {\n        return (<>{children}</>);\n    }\n\n\n    return (\n\n        <ConfigDispatchContext.Provider value={dispatch}>\n            <ConfigStateContext.Provider value={state}>\n                {children}\n            </ConfigStateContext.Provider>\n        </ConfigDispatchContext.Provider>\n    );\n\n};\n\nexport {ConfigStateContext, ConfigDispatchContext, ConfigurationsProvider}\n\n"]},"metadata":{},"sourceType":"module"}