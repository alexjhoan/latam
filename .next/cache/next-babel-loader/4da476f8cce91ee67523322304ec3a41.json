{"ast":null,"code":"import { useApolloClient } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\";\nimport md5 from \"js-md5\";\n\nvar singletonDefinedFragments = function () {\n  let fragments = {};\n\n  function key(id, typename, fields) {\n    return md5(typename + \";\" + id + \";\" + fields);\n  }\n\n  function newFragment(fragmentKey, id, typename, fields) {\n    const fragmentID = typename + \":\" + id;\n    return {\n      id: fragmentID,\n      fragment: gql`fragment fragment_${fragmentKey} on ${typename} { ${fields} }`\n    };\n  }\n\n  return {\n    generate: function (id, typename, fields) {\n      const fragmentKey = key(id, typename, fields);\n\n      if (typeof fragments[fragmentKey] == \"undefined\") {\n        fragments[fragmentKey] = newFragment(fragmentKey, id, typename, fields);\n      }\n\n      return fragments[fragmentKey];\n    }\n  };\n}();\n\nexport class FragmentDefiner {\n  constructor(typename, fields) {\n    this.typename = typename;\n    this.fields = fields;\n    this.fragments = [];\n  }\n\n  uses(...fragments) {\n    this.fragments = [...this.fragments, ...fragments];\n    return this;\n  }\n\n  read(id, customTypename) {\n    const fragment = singletonDefinedFragments.generate(id, customTypename ? customTypename : this.typename, this.fields);\n    ;\n    return fragment;\n  }\n\n  query() {\n    const f = this.fragments.reduce((acc, o) => {\n      return acc + \" \" + o.query();\n    }, \"\");\n    return ` ... on ${this.typename} { ${f} ${this.fields} }`;\n  }\n\n}\nexport function useReadFragment(fragment, id, customTypename) {\n  const data = useApolloClient().readFragment(fragment.read(id, customTypename));\n  return {\n    loading: data == null,\n    data,\n    error: null\n  };\n}","map":{"version":3,"sources":["/home/ansina/jsStuff/infocasas-landings/shared-components/GlobalHooks/useReadFragment.js"],"names":["useApolloClient","gql","md5","singletonDefinedFragments","fragments","key","id","typename","fields","newFragment","fragmentKey","fragmentID","fragment","generate","FragmentDefiner","constructor","uses","read","customTypename","query","f","reduce","acc","o","useReadFragment","data","readFragment","loading","error"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,gBAA9B;AACA,SAAQC,GAAR,QAAkB,gBAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;;AAEA,IAAIC,yBAAyB,GAAI,YAAW;AACxC,MAAIC,SAAS,GAAG,EAAhB;;AAEA,WAASC,GAAT,CAAcC,EAAd,EAAkBC,QAAlB,EAA4BC,MAA5B,EAAoC;AAChC,WAAON,GAAG,CAACK,QAAQ,GAAC,GAAT,GAAaD,EAAb,GAAgB,GAAhB,GAAoBE,MAArB,CAAV;AACH;;AAED,WAASC,WAAT,CAAqBC,WAArB,EAAiCJ,EAAjC,EAAqCC,QAArC,EAA+CC,MAA/C,EAAuD;AACnD,UAAMG,UAAU,GAAGJ,QAAQ,GAAG,GAAX,GAAiBD,EAApC;AACA,WAAO;AACHA,MAAAA,EAAE,EAAEK,UADD;AAEHC,MAAAA,QAAQ,EAAEX,GAAI,qBAAoBS,WAAY,OAAMH,QAAS,MAAKC,MAAQ;AAFvE,KAAP;AAKH;;AAED,SAAO;AACHK,IAAAA,QAAQ,EAAE,UAAUP,EAAV,EAAaC,QAAb,EAAsBC,MAAtB,EAA8B;AACpC,YAAME,WAAW,GAAGL,GAAG,CAACC,EAAD,EAAIC,QAAJ,EAAaC,MAAb,CAAvB;;AACA,UAAI,OAAOJ,SAAS,CAACM,WAAD,CAAhB,IAAiC,WAArC,EAAkD;AAC9CN,QAAAA,SAAS,CAACM,WAAD,CAAT,GAAyBD,WAAW,CAACC,WAAD,EAAaJ,EAAb,EAAgBC,QAAhB,EAAyBC,MAAzB,CAApC;AACH;;AACD,aAAOJ,SAAS,CAACM,WAAD,CAAhB;AAEH;AARE,GAAP;AAWH,CA3B+B,EAAhC;;AA8BA,OAAO,MAAMI,eAAN,CAAsB;AACzBC,EAAAA,WAAW,CAACR,QAAD,EAAUC,MAAV,EAAkB;AACzB,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKJ,SAAL,GAAiB,EAAjB;AACH;;AAEDY,EAAAA,IAAI,CAAC,GAAGZ,SAAJ,EAAe;AACf,SAAKA,SAAL,GAAiB,CAAC,GAAG,KAAKA,SAAT,EAAmB,GAAGA,SAAtB,CAAjB;AACA,WAAO,IAAP;AACH;;AAEDa,EAAAA,IAAI,CAACX,EAAD,EAAIY,cAAJ,EAAoB;AACpB,UAAMN,QAAQ,GAAGT,yBAAyB,CAACU,QAA1B,CAAmCP,EAAnC,EAAuCY,cAAc,GAACA,cAAD,GAAgB,KAAKX,QAA1E,EAAoF,KAAKC,MAAzF,CAAjB;AAAkH;AAClH,WAAOI,QAAP;AACH;;AAEDO,EAAAA,KAAK,GAAG;AACJ,UAAMC,CAAC,GAAG,KAAKhB,SAAL,CAAeiB,MAAf,CAAsB,CAACC,GAAD,EAAKC,CAAL,KAAW;AACvC,aAAOD,GAAG,GAAG,GAAN,GAAYC,CAAC,CAACJ,KAAF,EAAnB;AACH,KAFS,EAER,EAFQ,CAAV;AAIA,WAAQ,WAAU,KAAKZ,QAAS,MAAKa,CAAE,IAAG,KAAKZ,MAAO,IAAtD;AACH;;AAvBwB;AA4B7B,OAAO,SAASgB,eAAT,CAAyBZ,QAAzB,EAAmCN,EAAnC,EAAuCY,cAAvC,EAAuD;AAE1D,QAAMO,IAAI,GAAGzB,eAAe,GAAG0B,YAAlB,CAA+Bd,QAAQ,CAACK,IAAT,CAAcX,EAAd,EAAkBY,cAAlB,CAA/B,CAAb;AAEA,SAAO;AAAES,IAAAA,OAAO,EAAEF,IAAI,IAAE,IAAjB;AAAuBA,IAAAA,IAAvB;AAA6BG,IAAAA,KAAK,EAAE;AAApC,GAAP;AACH","sourcesContent":["import {useApolloClient} from \"@apollo/client\";\nimport {gql} from \"@apollo/client\";\nimport md5 from \"js-md5\";\n\nvar singletonDefinedFragments = (function() {\n    let fragments = {};\n\n    function key (id, typename, fields) {\n        return md5(typename+\";\"+id+\";\"+fields);\n    }\n\n    function newFragment(fragmentKey,id, typename, fields) {\n        const fragmentID = typename + \":\" + id;\n        return {\n            id: fragmentID,\n            fragment: gql`fragment fragment_${fragmentKey} on ${typename} { ${fields } }`\n        };\n\n    }\n\n    return {\n        generate: function (id,typename,fields) {\n            const fragmentKey = key(id,typename,fields);\n            if (typeof fragments[fragmentKey] == \"undefined\") {\n                fragments[fragmentKey] = newFragment(fragmentKey,id,typename,fields);\n            }\n            return fragments[fragmentKey];\n\n        },\n\n    };\n})();\n\n\nexport class FragmentDefiner {\n    constructor(typename,fields) {\n        this.typename = typename;\n        this.fields = fields;\n        this.fragments = [];\n    }\n\n    uses(...fragments) {\n        this.fragments = [...this.fragments,...fragments];\n        return this;\n    }\n\n    read(id,customTypename) {\n        const fragment = singletonDefinedFragments.generate(id, customTypename?customTypename:this.typename, this.fields);;\n        return fragment;\n    }\n\n    query() {\n        const f = this.fragments.reduce((acc,o) => {\n            return acc + \" \" + o.query()\n        },\"\");\n\n        return ` ... on ${this.typename} { ${f} ${this.fields} }`\n    }\n\n\n}\n\nexport function useReadFragment(fragment, id, customTypename) {\n\n    const data = useApolloClient().readFragment(fragment.read(id, customTypename));\n\n    return { loading: data==null, data, error: null }\n}\n"]},"metadata":{},"sourceType":"module"}