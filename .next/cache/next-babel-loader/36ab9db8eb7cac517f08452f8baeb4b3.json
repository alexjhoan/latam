{"ast":null,"code":"var _jsxFileName = \"/home/ansina/jsStuff/infocasas-landings/lib/apollo3.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport Head from \"next/head\";\nimport Cookies from \"universal-cookie\";\nimport fetch from \"isomorphic-unfetch\";\nimport { message } from \"antd\";\nimport { OfflineToastLoader } from \"../shared-components/Components/NoConectionToast/web\";\nimport Console from \"./console\";\nimport * as Sentry from \"@sentry/browser\";\nimport { ApolloClient, ApolloLink, ApolloProvider, concat, fromPromise, InMemoryCache, gql } from \"@apollo/client\";\nimport { getDataFromTree } from \"@apollo/client/react/ssr\";\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { openAuthModal } from \"../shared-components/Components/User/AuthModal/web\";\nlet apolloClient = null;\nconst CONFIG_QUERY = gql`\n\tquery InitialConfig {\n\t\tconfiguration {\n\t\t\tcountry_id\n\t\t\tcountry_name\n\t\t\tcountry_capital\n\t\t\tcountry_capital_id\n\t\t\tcountry_code\n\t\t\tsite_name\n\t\t\tlogo\n\t\t\tinformation_email\n\t\t\tsales_email\n\t\t\tcurrency {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t}\n\t\t\ttimezone\n\t\t\tIVA\n\t\t\tanalytics_id\n\t\t\tgoogle_tag_manager_id\n\t\t\trtb_id\n\t\t\tonesignal_configuration {\n\t\t\t\tapp_id\n\t\t\t}\n\t\t\tfacebook_configuration {\n\t\t\t\tpixel_id\n\t\t\t}\n\t\t\tpinterest_id\n\t\t\tinstagram_client_id\n\t\t\theader_configuration {\n\t\t\t\tbuttons {\n\t\t\t\t\ttext\n\t\t\t\t}\n\t\t\t}\n\t\t\tsocialMediaLinks {\n\t\t\t\tslug\n\t\t\t\tname\n\t\t\t\turl\n\t\t\t\ticon\n\t\t\t}\n\t\t\theader_links {\n\t\t\t\tid\n\t\t\t\ttitle\n\t\t\t\tlink\n\t\t\t\tbanner_params\n\t\t\t\tlinks {\n\t\t\t\t\theader_link_id\n\t\t\t\t\ttitle\n\t\t\t\t\tlink\n\t\t\t\t\tlinks {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\tlink\n\t\t\t\t\t\tcategory\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent, {\n  ssr = true,\n  domain = null\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    if (domain == null && false) {\n      domain = window.location.host;\n    }\n\n    const token = false ? new Cookies(document.cookie).get(\"frontend_token\") : null;\n    const client = apolloClient || initApolloClient(apolloState, token, domain);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 4\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 5\n      }\n    })));\n  };\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      var _ctx$req, _configQuery$data$con, _configQuery, _configQuery$data, _configQuery$data$con2, _configQuery2, _configQuery2$data, _configQuery2$data$co;\n\n      const {\n        AppTree\n      } = ctx;\n      const cookie = new Cookies(true ? ctx.req.headers.cookie : document.cookie);\n\n      if (domain == null) {\n        domain = true ? ctx.req.headers.host : window.location.host;\n      }\n\n      const apolloClient = ctx.apolloClient = initApolloClient(typeof ((_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : _ctx$req.session) !== \"undefined\" ? ctx.req.session.persisted_cache : {}, cookie.get(\"frontend_token\"), domain);\n      let configQuery = null;\n\n      try {\n        configQuery = await apolloClient.query({\n          query: CONFIG_QUERY\n        });\n      } catch (error) {\n        console.log(\"--------------------------------------------------\");\n        console.log(\"Initial Config querry error: \", error.graphQLErrors);\n        console.log(\"--------------------------------------------------\");\n      } // Run wrapped getInitialProps methods\n\n\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } // Only on the server:\n\n\n      if (true) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        } // Only if ssr is enabled\n\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                apolloClient\n              }),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 8\n              }\n            }));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            Console.log(\"---------------------\");\n            Console.error(\"Error while running `getDataFromTree`\");\n            Console.log(\"\\x1b[36m\");\n            Console.log(error);\n            Console.log(\"\\x1b[0m\");\n            Console.log(error.extensions);\n            Console.log(\"--------------------\");\n          } // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n\n\n          Head.rewind();\n        }\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread(_objectSpread({}, pageProps), {}, {\n        apolloState,\n        ConfigContextInitialState: (_configQuery$data$con = (_configQuery = configQuery) === null || _configQuery === void 0 ? void 0 : (_configQuery$data = _configQuery.data) === null || _configQuery$data === void 0 ? void 0 : _configQuery$data.configuration) !== null && _configQuery$data$con !== void 0 ? _configQuery$data$con : null,\n        country_id: (_configQuery$data$con2 = (_configQuery2 = configQuery) === null || _configQuery2 === void 0 ? void 0 : (_configQuery2$data = _configQuery2.data) === null || _configQuery2$data === void 0 ? void 0 : (_configQuery2$data$co = _configQuery2$data.configuration) === null || _configQuery2$data$co === void 0 ? void 0 : _configQuery2$data$co.country_id) !== null && _configQuery$data$con2 !== void 0 ? _configQuery$data$con2 : null\n      });\n    };\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState = {}, token, domain) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createApolloClient(initialState, token, domain);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    // via https://github.com/apollographql/apollo-client/issues/5089\n    //apolloClient = createApolloClient(initialState);\n    apolloClient = createApolloClient(initialState, token, domain);\n  }\n\n  return apolloClient;\n}\n\nclass ForceErrorLink extends ApolloLink {\n  constructor(error) {\n    super();\n\n    _defineProperty(this, \"error\", null);\n\n    this.error = error;\n  }\n\n  request(operation, forward) {\n    return new Observable(observer => {\n      observer.error(this.error);\n    });\n  }\n\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nfunction createApolloClient(initialState = {}, token, domain) {\n  const miMiddleware = xxx => new ApolloLink((operation, forward) => {\n    let anulable = false;\n\n    if (operation.query && operation.query.definitions && operation.query.definitions.length > 0) {\n      operation.query.definitions.map(o => {\n        if (o.name && o.name.value) {\n          Console.warn(\"Apollo is running query:  \\x1b[36m\" + o.name.value + \"\\x1b[0m\");\n        }\n      });\n    } else {\n      Console.warn(\"Apollo is running query \\x1b[36m\" + \"without name\" + \"\\x1b[0m\");\n    }\n\n    if (anulable) {\n      const link = new ForceErrorLink({\n        errors: [{\n          message: \"Local Unauthorized\"\n        }]\n      });\n      return link.request(operation, null);\n    }\n\n    const auth = false ? new Cookies(document.cookie).get(\"frontend_token\") : token;\n    operation.setContext({\n      headers: {\n        authorization: auth ? `Bearer ${auth}` : \"\",\n        \"x-origin\": domain\n      }\n    });\n    return forward(operation);\n  });\n\n  const cache = new InMemoryCache().restore(initialState);\n  const httpLink = new BatchHttpLink({\n    uri: process.env.graphQL_uri,\n    // Server URL (must be absolute)\n    credentials: \"same-origin\",\n    // Additional fetch() options like `credentials` or `headers`\n    fetch\n  });\n  const authLink = setContext((_, {\n    headers\n  }) => {\n    // get the authentication token from local storage if it exists\n    const _token = \"gika\";\n    const _domain = \"localhost:3000\";\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: _token ? `Bearer ${_token}` : \"\",\n        \"x-origin\": _domain\n      })\n    };\n  });\n  const links = [errorLink, authLink, httpLink];\n  const link = ApolloLink.from(links);\n  return new ApolloClient({\n    ssrMode: true,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: concat(errorLink, concat(miMiddleware(\"GOOD\"), new BatchHttpLink({\n      uri: process.env.graphQL_uri,\n      // Server URL (must be absolute)\n      credentials: \"same-origin\",\n      // Additional fetch() options like `credentials` or `headers`\n      fetch\n    }))),\n    cache: cache,\n    defaultOptions: {\n      watchQuery: {\n        fetchPolicy: \"cache-first\"\n      },\n      query: {\n        fetchPolicy: \"cache-first\"\n      }\n    }\n  });\n}\n\nexport function handleApolloError(error) {\n  console.error(JSON.stringify(error)); //debug even more info\n\n  let abort = true; //use this to filter some benign errors\n  // filtro Network Errors por aquellos que se dan al perder la conexion a internet\n  // al filtrar por \"Network Error: failed to fetch\" safari no devolvia ese mensaje de error entonces no filtraba bien en esos casos, ademas el mensaje dependia del lenguaje del dispositivo por lo que eran multiples mensajes a filtrar y podia ser que aparecieran otros mensajes diferentes.\n  // filtrando los Network Errors tambien filtraba algunos errores importantes como Network Error: ServerError statusCode 500\n  // por eso tambien se agrego a la condincion que no estuviera online !navigator.onLine\n\n  if (error && error.message && error.message.match(/Network error/) && typeof navigator != \"undefined\" && !navigator.onLine) {\n    message.open({\n      key: \"noConnection\",\n      content: __jsx(OfflineToastLoader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }\n      }),\n      icon: null,\n      type: null,\n      duration: 3\n    });\n  } else {\n    Sentry.captureException(error);\n  }\n\n  return abort;\n}\nlet isRefreshing = false;\nlet pendingRequests = [];\n\nconst resolvePendingRequests = () => {\n  console.log(\"resolve pending requests\", pendingRequests);\n  pendingRequests.map(callback => callback());\n  pendingRequests = [];\n};\n\nconst errorLink = onError((_ref2) => {\n  let {\n    graphQLErrors,\n    networkError,\n    operation,\n    forward,\n    location\n  } = _ref2,\n      other = _objectWithoutProperties(_ref2, [\"graphQLErrors\", \"networkError\", \"operation\", \"forward\", \"location\"]);\n\n  console.log(\"On error\");\n  console.log(graphQLErrors, networkError, other);\n  Console.log(\"Query con error: \\x1b[36m\" + operation.operationName + \"\\x1b[0m\");\n\n  if (true) {\n    return;\n  }\n\n  if (graphQLErrors && graphQLErrors.filter(e => e).length > 0) {\n    for (let err of graphQLErrors) {\n      if (err.debugMessage && err.debugMessage.includes(\"Unauthenticated\")) {\n        let forward$;\n\n        if (!isRefreshing) {\n          isRefreshing = true;\n          forward$ = fromPromise(openAuthModal({\n            withPromise: true\n          }).then(o => {\n            console.log(\"LOGIN ACEPTADO: \", o);\n\n            if (true) {\n              //@todo-login\n              console.log(\"COOKIE SETIADA\");\n              resolvePendingRequests();\n            } else {\n              console.log(\"ALGO SALIO MAL, NO HAY COOKIE\");\n            }\n\n            return true;\n          }).catch(error => {\n            console.log(\"LOGIN RECHAZADO: \", error);\n            pendingRequests = [];\n            return;\n          }).finally(() => {\n            isRefreshing = false;\n          })).filter(value => {\n            return Boolean(value);\n          });\n        } else {\n          // Will only emit once the Promise is resolved\n          forward$ = fromPromise(new Promise(resolve => {\n            pendingRequests.push(() => resolve());\n          }));\n        }\n\n        return forward$.flatMap(() => {\n          console.log(\"Forwarding!\");\n          console.log(operation);\n          return forward(operation);\n        });\n      } else {\n        Sentry.captureException(err);\n      }\n    }\n  }\n\n  if (networkError) {\n    console.log(\"Network error: \", networkError);\n    message.open({\n      key: \"noConnection\",\n      content: __jsx(OfflineToastLoader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 14\n        }\n      }),\n      icon: null,\n      type: null,\n      duration: 3\n    });\n  }\n});","map":{"version":3,"sources":["/home/ansina/jsStuff/infocasas-landings/lib/apollo3.tsx"],"names":["React","Head","Cookies","fetch","message","OfflineToastLoader","Console","Sentry","ApolloClient","ApolloLink","ApolloProvider","concat","fromPromise","InMemoryCache","gql","getDataFromTree","BatchHttpLink","onError","setContext","openAuthModal","apolloClient","CONFIG_QUERY","withApollo","PageComponent","ssr","domain","WithApollo","apolloState","pageProps","window","location","host","token","document","cookie","get","client","initApolloClient","getInitialProps","ctx","AppTree","req","headers","session","persisted_cache","configQuery","query","error","console","log","graphQLErrors","res","finished","extensions","rewind","cache","extract","ConfigContextInitialState","data","configuration","country_id","initialState","createApolloClient","ForceErrorLink","constructor","request","operation","forward","Observable","observer","miMiddleware","xxx","anulable","definitions","length","map","o","name","value","warn","link","errors","auth","authorization","restore","httpLink","uri","process","env","graphQL_uri","credentials","authLink","_","_token","_domain","links","errorLink","from","ssrMode","defaultOptions","watchQuery","fetchPolicy","handleApolloError","JSON","stringify","abort","match","navigator","onLine","open","key","content","icon","type","duration","captureException","isRefreshing","pendingRequests","resolvePendingRequests","callback","networkError","other","operationName","filter","e","err","debugMessage","includes","forward$","withPromise","then","catch","finally","Boolean","Promise","resolve","push","flatMap"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport Cookies from \"universal-cookie\";\nimport fetch from \"isomorphic-unfetch\";\nimport { message } from \"antd\";\nimport { OfflineToastLoader } from \"../shared-components/Components/NoConectionToast/web\";\nimport Console from \"./console\";\nimport * as Sentry from \"@sentry/browser\";\nimport {\n\tApolloClient,\n\tApolloLink,\n\tApolloProvider,\n\tconcat,\n\tfromPromise,\n\tInMemoryCache,\n\tgql,\n\tApolloQueryResult,\n} from \"@apollo/client\";\nimport { getDataFromTree } from \"@apollo/client/react/ssr\";\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { openAuthModal } from \"../shared-components/Components/User/AuthModal/web\";\nlet apolloClient = null;\n\nconst CONFIG_QUERY = gql`\n\tquery InitialConfig {\n\t\tconfiguration {\n\t\t\tcountry_id\n\t\t\tcountry_name\n\t\t\tcountry_capital\n\t\t\tcountry_capital_id\n\t\t\tcountry_code\n\t\t\tsite_name\n\t\t\tlogo\n\t\t\tinformation_email\n\t\t\tsales_email\n\t\t\tcurrency {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t}\n\t\t\ttimezone\n\t\t\tIVA\n\t\t\tanalytics_id\n\t\t\tgoogle_tag_manager_id\n\t\t\trtb_id\n\t\t\tonesignal_configuration {\n\t\t\t\tapp_id\n\t\t\t}\n\t\t\tfacebook_configuration {\n\t\t\t\tpixel_id\n\t\t\t}\n\t\t\tpinterest_id\n\t\t\tinstagram_client_id\n\t\t\theader_configuration {\n\t\t\t\tbuttons {\n\t\t\t\t\ttext\n\t\t\t\t}\n\t\t\t}\n\t\t\tsocialMediaLinks {\n\t\t\t\tslug\n\t\t\t\tname\n\t\t\t\turl\n\t\t\t\ticon\n\t\t\t}\n\t\t\theader_links {\n\t\t\t\tid\n\t\t\t\ttitle\n\t\t\t\tlink\n\t\t\t\tbanner_params\n\t\t\t\tlinks {\n\t\t\t\t\theader_link_id\n\t\t\t\t\ttitle\n\t\t\t\t\tlink\n\t\t\t\t\tlinks {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\tlink\n\t\t\t\t\t\tcategory\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true, domain = null } = {}) {\n\tconst WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n\t\tif (domain == null && typeof window !== \"undefined\") {\n\t\t\tdomain = window.location.host;\n\t\t}\n\n\t\tconst token =\n\t\t\ttypeof window !== \"undefined\"\n\t\t\t\t? new Cookies(document.cookie).get(\"frontend_token\")\n\t\t\t\t: null;\n\t\tconst client = apolloClient || initApolloClient(apolloState, token, domain);\n\t\treturn (\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t<PageComponent {...pageProps} />\n\t\t\t</ApolloProvider>\n\t\t);\n\t};\n\n\tif (ssr || PageComponent.getInitialProps) {\n\t\tWithApollo.getInitialProps = async ctx => {\n\t\t\tconst { AppTree } = ctx;\n\t\t\tconst cookie = new Cookies(\n\t\t\t\ttypeof window === \"undefined\" ? ctx.req.headers.cookie : document.cookie\n\t\t\t);\n\t\t\tif (domain == null) {\n\t\t\t\tdomain =\n\t\t\t\t\ttypeof window === \"undefined\" ? ctx.req.headers.host : window.location.host;\n\t\t\t}\n\n\t\t\tconst apolloClient = (ctx.apolloClient = initApolloClient(\n\t\t\t\ttypeof ctx.req?.session !== \"undefined\" ? ctx.req.session.persisted_cache : {},\n\t\t\t\tcookie.get(\"frontend_token\"),\n\t\t\t\tdomain\n\t\t\t));\n\n\t\t\tlet configQuery = null;\n\t\t\ttry {\n\t\t\t\tconfigQuery = await apolloClient.query({ query: CONFIG_QUERY });\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(\"--------------------------------------------------\");\n\t\t\t\tconsole.log(\"Initial Config querry error: \", error.graphQLErrors);\n\t\t\t\tconsole.log(\"--------------------------------------------------\");\n\t\t\t}\n\n\t\t\t// Run wrapped getInitialProps methods\n\t\t\tlet pageProps = {};\n\t\t\tif (PageComponent.getInitialProps) {\n\t\t\t\tpageProps = await PageComponent.getInitialProps(ctx);\n\t\t\t}\n\n\t\t\t// Only on the server:\n\t\t\tif (typeof window === \"undefined\") {\n\t\t\t\t// When redirecting, the response is finished.\n\t\t\t\t// No point in continuing to render\n\t\t\t\tif (ctx.res && ctx.res.finished) {\n\t\t\t\t\treturn pageProps;\n\t\t\t\t}\n\n\t\t\t\t// Only if ssr is enabled\n\t\t\t\tif (ssr) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Run all GraphQL queries\n\t\t\t\t\t\tawait getDataFromTree(\n\t\t\t\t\t\t\t<AppTree\n\t\t\t\t\t\t\t\tpageProps={{\n\t\t\t\t\t\t\t\t\t...pageProps,\n\t\t\t\t\t\t\t\t\tapolloClient,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t// Prevent Apollo Client GraphQL errors from crashing SSR.\n\t\t\t\t\t\t// Handle them in components via the data.error prop:\n\t\t\t\t\t\t// https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n\t\t\t\t\t\tConsole.log(\"---------------------\");\n\t\t\t\t\t\tConsole.error(\"Error while running `getDataFromTree`\");\n\t\t\t\t\t\tConsole.log(\"\\x1b[36m\");\n\t\t\t\t\t\tConsole.log(error);\n\t\t\t\t\t\tConsole.log(\"\\x1b[0m\");\n\t\t\t\t\t\tConsole.log(error.extensions);\n\t\t\t\t\t\tConsole.log(\"--------------------\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// getDataFromTree does not call componentWillUnmount\n\t\t\t\t\t// head side effect therefore need to be cleared manually\n\t\t\t\t\tHead.rewind();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Extract query data from the Apollo store\n\t\t\tconst apolloState = apolloClient.cache.extract();\n\n\t\t\treturn {\n\t\t\t\t...pageProps,\n\t\t\t\tapolloState,\n\t\t\t\tConfigContextInitialState: configQuery?.data?.configuration ?? null,\n\t\t\t\tcountry_id: configQuery?.data?.configuration?.country_id ?? null,\n\t\t\t};\n\t\t};\n\t}\n\n\treturn WithApollo;\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState = {}, token, domain) {\n\t// Make sure to create a new client for every server-side request so that data\n\t// isn't shared between connections (which would be bad)\n\n\tif (typeof window === \"undefined\") {\n\t\treturn createApolloClient(initialState, token, domain);\n\t}\n\n\t// Reuse client on the client-side\n\tif (!apolloClient) {\n\t\t// via https://github.com/apollographql/apollo-client/issues/5089\n\t\t//apolloClient = createApolloClient(initialState);\n\t\tapolloClient = createApolloClient(initialState, token, domain);\n\t}\n\n\treturn apolloClient;\n}\n\nclass ForceErrorLink extends ApolloLink {\n\tpublic error = null;\n\tconstructor(error) {\n\t\tsuper();\n\t\tthis.error = error;\n\t}\n\trequest(operation, forward) {\n\t\treturn new Observable(observer => {\n\t\t\tobserver.error(this.error);\n\t\t});\n\t}\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}, token, domain) {\n\tconst miMiddleware = xxx =>\n\t\tnew ApolloLink((operation, forward) => {\n\t\t\tlet anulable = false;\n\n\t\t\tif (\n\t\t\t\toperation.query &&\n\t\t\t\toperation.query.definitions &&\n\t\t\t\toperation.query.definitions.length > 0\n\t\t\t) {\n\t\t\t\toperation.query.definitions.map(o => {\n\t\t\t\t\tif (o.name && o.name.value) {\n\t\t\t\t\t\tConsole.warn(\n\t\t\t\t\t\t\t\"Apollo is running query:  \\x1b[36m\" + o.name.value + \"\\x1b[0m\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tConsole.warn(\"Apollo is running query \\x1b[36m\" + \"without name\" + \"\\x1b[0m\");\n\t\t\t}\n\n\t\t\tif (anulable) {\n\t\t\t\tconst link = new ForceErrorLink({\n\t\t\t\t\terrors: [{ message: \"Local Unauthorized\" }],\n\t\t\t\t});\n\t\t\t\treturn link.request(operation, null);\n\t\t\t}\n\n\t\t\tconst auth =\n\t\t\t\ttypeof window !== \"undefined\"\n\t\t\t\t\t? new Cookies(document.cookie).get(\"frontend_token\")\n\t\t\t\t\t: token;\n\n\t\t\toperation.setContext({\n\t\t\t\theaders: {\n\t\t\t\t\tauthorization: auth ? `Bearer ${auth}` : \"\",\n\t\t\t\t\t\"x-origin\": domain,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn forward(operation);\n\t\t});\n\n\tconst cache = new InMemoryCache().restore(initialState);\n\n\tconst httpLink = new BatchHttpLink({\n\t\turi: process.env.graphQL_uri, // Server URL (must be absolute)\n\t\tcredentials: \"same-origin\", // Additional fetch() options like `credentials` or `headers`\n\t\tfetch,\n\t});\n\n\tconst authLink = setContext((_, { headers }) => {\n\t\t// get the authentication token from local storage if it exists\n\t\tconst _token = \"gika\";\n\t\tconst _domain = \"localhost:3000\";\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t...headers,\n\t\t\t\tauthorization: _token ? `Bearer ${_token}` : \"\",\n\t\t\t\t\"x-origin\": _domain,\n\t\t\t},\n\t\t};\n\t});\n\n\tconst links = [errorLink, authLink, httpLink];\n\tconst link = ApolloLink.from(links);\n\n\treturn new ApolloClient({\n\t\tssrMode: typeof window === \"undefined\", // Disables forceFetch on the server (so queries are only run once)\n\t\tlink: concat(\n\t\t\terrorLink,\n\t\t\tconcat(\n\t\t\t\tmiMiddleware(\"GOOD\"),\n\t\t\t\tnew BatchHttpLink({\n\t\t\t\t\turi: process.env.graphQL_uri, // Server URL (must be absolute)\n\t\t\t\t\tcredentials: \"same-origin\", // Additional fetch() options like `credentials` or `headers`\n\t\t\t\t\tfetch,\n\t\t\t\t})\n\t\t\t)\n\t\t),\n\t\tcache: cache,\n\t\tdefaultOptions: {\n\t\t\twatchQuery: {\n\t\t\t\tfetchPolicy: \"cache-first\",\n\t\t\t},\n\t\t\tquery: {\n\t\t\t\tfetchPolicy: \"cache-first\",\n\t\t\t},\n\t\t},\n\t});\n}\n\nexport function handleApolloError(error) {\n\tconsole.error(JSON.stringify(error)); //debug even more info\n\tlet abort = true;\n\t//use this to filter some benign errors\n\t// filtro Network Errors por aquellos que se dan al perder la conexion a internet\n\t// al filtrar por \"Network Error: failed to fetch\" safari no devolvia ese mensaje de error entonces no filtraba bien en esos casos, ademas el mensaje dependia del lenguaje del dispositivo por lo que eran multiples mensajes a filtrar y podia ser que aparecieran otros mensajes diferentes.\n\t// filtrando los Network Errors tambien filtraba algunos errores importantes como Network Error: ServerError statusCode 500\n\t// por eso tambien se agrego a la condincion que no estuviera online !navigator.onLine\n\tif (\n\t\terror &&\n\t\terror.message &&\n\t\terror.message.match(/Network error/) &&\n\t\ttypeof navigator != \"undefined\" &&\n\t\t!navigator.onLine\n\t) {\n\t\tmessage.open({\n\t\t\tkey: \"noConnection\",\n\t\t\tcontent: <OfflineToastLoader />,\n\t\t\ticon: null,\n\t\t\ttype: null,\n\t\t\tduration: 3,\n\t\t});\n\t} else {\n\t\tSentry.captureException(error);\n\t}\n\treturn abort;\n}\n\nlet isRefreshing = false;\nlet pendingRequests = [];\n\nconst resolvePendingRequests = () => {\n\tconsole.log(\"resolve pending requests\", pendingRequests);\n\tpendingRequests.map(callback => callback());\n\tpendingRequests = [];\n};\n\nconst errorLink = onError(\n\t({ graphQLErrors, networkError, operation, forward, location, ...other }) => {\n\t\tconsole.log(\"On error\");\n\t\tconsole.log(graphQLErrors, networkError, other);\n\t\tConsole.log(\"Query con error: \\x1b[36m\" + operation.operationName + \"\\x1b[0m\");\n\n\t\tif (typeof window === \"undefined\") {\n\t\t\treturn;\n\t\t}\n\n\t\tif (graphQLErrors && graphQLErrors.filter(e => e).length > 0) {\n\t\t\tfor (let err of graphQLErrors) {\n\t\t\t\tif (err.debugMessage && err.debugMessage.includes(\"Unauthenticated\")) {\n\t\t\t\t\tlet forward$;\n\t\t\t\t\tif (!isRefreshing) {\n\t\t\t\t\t\tisRefreshing = true;\n\t\t\t\t\t\tforward$ = fromPromise(\n\t\t\t\t\t\t\topenAuthModal({ withPromise: true })\n\t\t\t\t\t\t\t\t.then(o => {\n\t\t\t\t\t\t\t\t\tconsole.log(\"LOGIN ACEPTADO: \", o);\n\t\t\t\t\t\t\t\t\tif (true) {\n\t\t\t\t\t\t\t\t\t\t//@todo-login\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"COOKIE SETIADA\");\n\t\t\t\t\t\t\t\t\t\tresolvePendingRequests();\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"ALGO SALIO MAL, NO HAY COOKIE\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\t\t\tconsole.log(\"LOGIN RECHAZADO: \", error);\n\t\t\t\t\t\t\t\t\tpendingRequests = [];\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.finally(() => {\n\t\t\t\t\t\t\t\t\tisRefreshing = false;\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t).filter(value => {\n\t\t\t\t\t\t\treturn Boolean(value);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Will only emit once the Promise is resolved\n\t\t\t\t\t\tforward$ = fromPromise(\n\t\t\t\t\t\t\tnew Promise(resolve => {\n\t\t\t\t\t\t\t\tpendingRequests.push(() => resolve());\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn forward$.flatMap(() => {\n\t\t\t\t\t\tconsole.log(\"Forwarding!\");\n\t\t\t\t\t\tconsole.log(operation);\n\t\t\t\t\t\treturn forward(operation);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tSentry.captureException(err);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (networkError) {\n\t\t\tconsole.log(\"Network error: \", networkError);\n\t\t\tmessage.open({\n\t\t\t\tkey: \"noConnection\",\n\t\t\t\tcontent: <OfflineToastLoader />,\n\t\t\t\ticon: null,\n\t\t\t\ttype: null,\n\t\t\t\tduration: 3,\n\t\t\t});\n\t\t}\n\t}\n);\n"]},"metadata":{},"sourceType":"module"}