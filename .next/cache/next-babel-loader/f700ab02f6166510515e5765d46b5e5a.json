{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { gql, useQuery } from \"@apollo/client\";\nconst COUNTRIES_QUERY = gql`\n\t{\n\t\tcountries {\n\t\t\tid\n\t\t\tname\n\t\t\torder\n\t\t\tdata {\n\t\t\t\tmain_domain\n\t\t\t\tcountry_flag\n\t\t\t}\n\t\t}\n\t}\n`;\n\nconst parseData = countries => {\n  return countries.map(country => _objectSpread({\n    id: country.id,\n    name: country.name,\n    url: `//${country.data.main_domain}`\n  }, country.data));\n};\n\nexport const useCountries = () => {\n  var _data$countries;\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(COUNTRIES_QUERY);\n  return {\n    loading,\n    countries: parseData((_data$countries = data === null || data === void 0 ? void 0 : data.countries) !== null && _data$countries !== void 0 ? _data$countries : []),\n    error\n  };\n};","map":{"version":3,"sources":["/home/ansina/jsStuff/infocasas-landings/shared-components/ViewFragments/Footer/MoreAboutUs/Flags/hook.tsx"],"names":["gql","useQuery","COUNTRIES_QUERY","parseData","countries","map","country","id","name","url","data","main_domain","useCountries","loading","error"],"mappings":";;;;;;AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AAEA,MAAMC,eAAe,GAAGF,GAAI;;;;;;;;;;;;CAA5B;;AAcA,MAAMG,SAAS,GAAGC,SAAS,IAAI;AAC9B,SAAOA,SAAS,CAACC,GAAV,CAAcC,OAAO;AAC3BC,IAAAA,EAAE,EAAED,OAAO,CAACC,EADe;AAE3BC,IAAAA,IAAI,EAAEF,OAAO,CAACE,IAFa;AAG3BC,IAAAA,GAAG,EAAG,KAAIH,OAAO,CAACI,IAAR,CAAaC,WAAY;AAHR,KAIxBL,OAAO,CAACI,IAJgB,CAArB,CAAP;AAMA,CAPD;;AASA,OAAO,MAAME,YAAY,GAAG,MAAM;AAAA;;AACjC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBJ,IAAAA;AAAlB,MAA2BT,QAAQ,CAACC,eAAD,CAAzC;AAEA,SAAO;AACNW,IAAAA,OADM;AAENT,IAAAA,SAAS,EAAED,SAAS,oBAACO,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEN,SAAP,6DAAoB,EAApB,CAFd;AAGNU,IAAAA;AAHM,GAAP;AAKA,CARM","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\n\nconst COUNTRIES_QUERY = gql`\n\t{\n\t\tcountries {\n\t\t\tid\n\t\t\tname\n\t\t\torder\n\t\t\tdata {\n\t\t\t\tmain_domain\n\t\t\t\tcountry_flag\n\t\t\t}\n\t\t}\n\t}\n`;\n\nconst parseData = countries => {\n\treturn countries.map(country => ({\n\t\tid: country.id,\n\t\tname: country.name,\n\t\turl: `//${country.data.main_domain}`,\n\t\t...country.data,\n\t}));\n};\n\nexport const useCountries = () => {\n\tconst { loading, error, data } = useQuery(COUNTRIES_QUERY);\n\n\treturn {\n\t\tloading,\n\t\tcountries: parseData(data?.countries ?? []),\n\t\terror,\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}