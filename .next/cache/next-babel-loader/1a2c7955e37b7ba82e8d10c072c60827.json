{"ast":null,"code":"import { FragmentDefiner, useReadFragment } from \"../../../GlobalHooks/useReadFragment\";\nimport { isTemporal } from \"../../../Utils/Functions\";\nimport { useFilters } from \"../Filters.hook\";\nexport const FRAGMENT_PROPERTYTYPES_OPTIONS = new FragmentDefiner(\"Filter\", `\n\t\tid\n\t\tname\n\t\toptions\n  `);\nexport const FRAGMENT_PROPERTYTYPES = new FragmentDefiner(\"Filters\", `\n\t\tpropertyType {\n\t\t  ${FRAGMENT_PROPERTYTYPES_OPTIONS.query()}\n\t\t}\n  `);\n\nconst usePropertyType = props => {\n  const {\n    filters,\n    changeFilters\n  } = useFilters();\n  const {\n    labeled = false,\n    selectedValue = filters === null || filters === void 0 ? void 0 : filters.property_type_id,\n    inputType = \"select\",\n    currentFilters = filters,\n    filterChanged = changeFilters\n  } = props;\n  const {\n    loading,\n    data,\n    error\n  } = useReadFragment(FRAGMENT_PROPERTYTYPES_OPTIONS, \"propertyType\");\n\n  const onChange = newValue => {\n    let res = [];\n\n    if (newValue != null) {\n      res = newValue.map(v => {\n        return {\n          value: v[\"property_type_id\"],\n          text: v[\"name\"]\n        };\n      });\n    }\n\n    filterChanged({\n      property_type_id: res\n    });\n  };\n\n  const type = \"multiple\";\n  return {\n    loading: loading,\n    data: {\n      options: isTemporal(filters.operation_type_id) ? data === null || data === void 0 ? void 0 : data.options.filter(e => e.id == 1 || e.id == 2) : data === null || data === void 0 ? void 0 : data.options,\n      onChange,\n      value: selectedValue,\n      type: type,\n      customKey: \"property_type_id\"\n    },\n    error: error,\n    show: true,\n    labeled,\n    label: data === null || data === void 0 ? void 0 : data.name,\n    inputType\n  };\n};\n\nexport { usePropertyType };","map":{"version":3,"sources":["/home/ansina/jsStuff/infocasas-landings/shared-components/Components/Filters/PropertyType/PropertyType.hook.tsx"],"names":["FragmentDefiner","useReadFragment","isTemporal","useFilters","FRAGMENT_PROPERTYTYPES_OPTIONS","FRAGMENT_PROPERTYTYPES","query","usePropertyType","props","filters","changeFilters","labeled","selectedValue","property_type_id","inputType","currentFilters","filterChanged","loading","data","error","onChange","newValue","res","map","v","value","text","type","options","operation_type_id","filter","e","id","customKey","show","label","name"],"mappings":"AACA,SAASA,eAAT,EAA0BC,eAA1B,QAAiD,sCAAjD;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,SAASC,UAAT,QAA2B,iBAA3B;AAEA,OAAO,MAAMC,8BAA8B,GAAG,IAAIJ,eAAJ,CAC7C,QAD6C,EAE5C;;;;GAF4C,CAAvC;AAQP,OAAO,MAAMK,sBAAsB,GAAG,IAAIL,eAAJ,CACrC,SADqC,EAEpC;;MAEII,8BAA8B,CAACE,KAA/B,EAAuC;;GAJP,CAA/B;;AASP,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAChC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA6BP,UAAU,EAA7C;AACA,QAAM;AACLQ,IAAAA,OAAO,GAAG,KADL;AAELC,IAAAA,aAAa,GAAGH,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEI,gBAFpB;AAGLC,IAAAA,SAAS,GAAG,QAHP;AAILC,IAAAA,cAAc,GAAGN,OAJZ;AAKLO,IAAAA,aAAa,GAAGN;AALX,MAMFF,KANJ;AAQA,QAAM;AAAES,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,MAA2BlB,eAAe,CAC/CG,8BAD+C,EAE/C,cAF+C,CAAhD;;AAKA,QAAMgB,QAAQ,GAAGC,QAAQ,IAAI;AAC5B,QAAIC,GAAG,GAAG,EAAV;;AACA,QAAID,QAAQ,IAAI,IAAhB,EAAsB;AACrBC,MAAAA,GAAG,GAAGD,QAAQ,CAACE,GAAT,CAAaC,CAAC,IAAI;AACvB,eAAO;AAAEC,UAAAA,KAAK,EAAED,CAAC,CAAC,kBAAD,CAAV;AAAgCE,UAAAA,IAAI,EAAEF,CAAC,CAAC,MAAD;AAAvC,SAAP;AACA,OAFK,CAAN;AAGA;;AACDR,IAAAA,aAAa,CAAC;AAAEH,MAAAA,gBAAgB,EAAES;AAApB,KAAD,CAAb;AACA,GARD;;AAUA,QAAMK,IAAiB,GAAG,UAA1B;AACA,SAAO;AACNV,IAAAA,OAAO,EAAEA,OADH;AAENC,IAAAA,IAAI,EAAE;AACLU,MAAAA,OAAO,EAAE1B,UAAU,CAACO,OAAO,CAACoB,iBAAT,CAAV,GAAwCX,IAAxC,aAAwCA,IAAxC,uBAAwCA,IAAI,CAAEU,OAAN,CAAcE,MAAd,CAAqBC,CAAC,IAAIA,CAAC,CAACC,EAAF,IAAQ,CAAR,IAAaD,CAAC,CAACC,EAAF,IAAQ,CAA/C,CAAxC,GAA4Fd,IAA5F,aAA4FA,IAA5F,uBAA4FA,IAAI,CAAEU,OADtG;AAELR,MAAAA,QAFK;AAGLK,MAAAA,KAAK,EAAEb,aAHF;AAILe,MAAAA,IAAI,EAAEA,IAJD;AAKLM,MAAAA,SAAS,EAAE;AALN,KAFA;AASNd,IAAAA,KAAK,EAAEA,KATD;AAUNe,IAAAA,IAAI,EAAE,IAVA;AAWNvB,IAAAA,OAXM;AAYNwB,IAAAA,KAAK,EAAEjB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEkB,IAZP;AAaNtB,IAAAA;AAbM,GAAP;AAeA,CAzCD;;AA2CA,SAASP,eAAT","sourcesContent":["import { useEffect } from \"react\";\nimport { FragmentDefiner, useReadFragment } from \"../../../GlobalHooks/useReadFragment\";\nimport { isTemporal } from \"../../../Utils/Functions\";\nimport { SelectTypes } from \"../../Inputs/Selects/Selects.hook\";\nimport { useFilters } from \"../Filters.hook\";\n\nexport const FRAGMENT_PROPERTYTYPES_OPTIONS = new FragmentDefiner(\n\t\"Filter\",\n\t`\n\t\tid\n\t\tname\n\t\toptions\n  `\n);\nexport const FRAGMENT_PROPERTYTYPES = new FragmentDefiner(\n\t\"Filters\",\n\t`\n\t\tpropertyType {\n\t\t  ${FRAGMENT_PROPERTYTYPES_OPTIONS.query()}\n\t\t}\n  `\n);\n\nconst usePropertyType = props => {\n\tconst { filters, changeFilters } = useFilters();\n\tconst {\n\t\tlabeled = false,\n\t\tselectedValue = filters?.property_type_id,\n\t\tinputType = \"select\",\n\t\tcurrentFilters = filters,\n\t\tfilterChanged = changeFilters,\n\t} = props;\n\n\tconst { loading, data, error } = useReadFragment(\n\t\tFRAGMENT_PROPERTYTYPES_OPTIONS,\n\t\t\"propertyType\"\n\t);\n\n\tconst onChange = newValue => {\n\t\tlet res = [];\n\t\tif (newValue != null) {\n\t\t\tres = newValue.map(v => {\n\t\t\t\treturn { value: v[\"property_type_id\"], text: v[\"name\"] };\n\t\t\t});\n\t\t}\n\t\tfilterChanged({ property_type_id: res });\n\t};\n\n\tconst type: SelectTypes = \"multiple\";\n\treturn {\n\t\tloading: loading,\n\t\tdata: {\n\t\t\toptions: isTemporal(filters.operation_type_id) ? data?.options.filter(e => e.id == 1 || e.id == 2) : data?.options,\n\t\t\tonChange,\n\t\t\tvalue: selectedValue,\n\t\t\ttype: type,\n\t\t\tcustomKey: \"property_type_id\",\n\t\t},\n\t\terror: error,\n\t\tshow: true,\n\t\tlabeled,\n\t\tlabel: data?.name,\n\t\tinputType,\n\t};\n};\n\nexport { usePropertyType };\n"]},"metadata":{},"sourceType":"module"}