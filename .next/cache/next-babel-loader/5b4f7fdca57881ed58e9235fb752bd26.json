{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\tquery Location($strSearch: String!) {\\n\\t\\tsearchLocation(searchTerm: $strSearch) {\\n\\t\\t\\t... on Estate {\\n\\t\\t\\t\\tid\\n\\t\\t\\t\\tname\\n\\t\\t\\t}\\n\\t\\t\\t... on Neighborhood {\\n\\t\\t\\t\\tid\\n\\t\\t\\t\\tname\\n\\t\\t\\t\\testate {\\n\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t__typename\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useState, useEffect } from \"react\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { useFilters } from \"../Filters.hook\";\nvar KEYWORD_LOCATION_QUERY = gql(_templateObject());\nexport var useKeywordLocation = function useKeywordLocation(_ref) {\n  _s();\n\n  var filterChanged = _ref.filterChanged;\n\n  // hook setup\n  var _useFilters = useFilters(),\n      filters = _useFilters.filters;\n\n  var _useState = useState(\"\"),\n      keyword = _useState[0],\n      setKeyWord = _useState[1];\n\n  var _useState2 = useState(null),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  useEffect(function () {\n    return updateFilters();\n  }, [location]); // hook functions\n\n  var onSelect = function onSelect(val, opt) {\n    setLocation(opt);\n    setKeyWord(val);\n  };\n\n  var onSearch = function onSearch(val) {\n    setKeyWord(val);\n    if (val.length > 0) searchQuery({\n      variables: {\n        strSearch: val\n      }\n    });\n  };\n\n  var _useLazyQuery = useLazyQuery(KEYWORD_LOCATION_QUERY),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n      searchQuery = _useLazyQuery2[0],\n      _useLazyQuery2$ = _useLazyQuery2[1],\n      data = _useLazyQuery2$.data,\n      loading = _useLazyQuery2$.loading;\n\n  var updateFilters = function updateFilters() {\n    if (location) {\n      if (location.__typename == \"keyword\") {\n        filterChanged({\n          neighborhood_id: null,\n          estate_id: null,\n          searchstring: {\n            text: keyword,\n            value: keyword\n          }\n        });\n      } else if (location.estate) filterChanged({\n        neighborhood_id: [{\n          text: location.name,\n          value: location.id\n        }],\n        estate_id: {\n          text: location.estate.name,\n          value: location.estate.id\n        },\n        searchstring: null\n      });else filterChanged({\n        neighborhood_id: null,\n        estate_id: {\n          text: location.name,\n          value: location.id\n        },\n        searchstring: null\n      });\n    }\n  }; // hook output API\n\n\n  return {\n    keyword: keyword,\n    location: location,\n    show: true,\n    onSearch: onSearch,\n    onSelect: onSelect,\n    searchResults: data,\n    searchLoading: loading\n  };\n};\n\n_s(useKeywordLocation, \"bzItPc7F/RwQ5YYThrx3vGHHIW4=\", false, function () {\n  return [useFilters, useLazyQuery];\n});","map":{"version":3,"sources":["/home/ansina/jsStuff/infocasas-landings/shared-components/Components/Filters/KeywordLocation/KeywordLocation.hook.tsx"],"names":["useState","useEffect","gql","useLazyQuery","useFilters","KEYWORD_LOCATION_QUERY","useKeywordLocation","filterChanged","filters","keyword","setKeyWord","location","setLocation","updateFilters","onSelect","val","opt","onSearch","length","searchQuery","variables","strSearch","data","loading","__typename","neighborhood_id","estate_id","searchstring","text","value","estate","name","id","show","searchResults","searchLoading"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { useFilters } from \"../Filters.hook\";\nimport { isTemporal } from \"../../../Utils/Functions\";\n\nconst KEYWORD_LOCATION_QUERY = gql`\n\tquery Location($strSearch: String!) {\n\t\tsearchLocation(searchTerm: $strSearch) {\n\t\t\t... on Estate {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t}\n\t\t\t... on Neighborhood {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\testate {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n\t\t\t__typename\n\t\t}\n\t}\n`;\n\nexport interface KeywordLocationProps {\n\tclassName?: string;\n\tfilterChanged: ({}: any) => void;\n}\n\nexport const useKeywordLocation = ({ filterChanged }: KeywordLocationProps) => {\n\t// hook setup\n\tconst { filters } = useFilters();\n\tconst [keyword, setKeyWord] = useState<string>(\"\");\n\tconst [location, setLocation] = useState(null);\n\n\tuseEffect(() => updateFilters(), [location]);\n\n\t// hook functions\n\tconst onSelect = (val, opt) => {\n\t\tsetLocation(opt);\n\t\tsetKeyWord(val);\n\t};\n\n\tconst onSearch = (val: string) => {\n\t\tsetKeyWord(val);\n\t\tif (val.length > 0) searchQuery({ variables: { strSearch: val } });\n\t};\n\n\tconst [searchQuery, { data, loading }] = useLazyQuery(KEYWORD_LOCATION_QUERY);\n\n\tconst updateFilters = () => {\n\t\tif (location) {\n\t\t\tif (location.__typename == \"keyword\") {\n\t\t\t\tfilterChanged({\n\t\t\t\t\tneighborhood_id: null,\n\t\t\t\t\testate_id: null,\n\t\t\t\t\tsearchstring: { text: keyword, value: keyword },\n\t\t\t\t});\n\t\t\t} else if (location.estate)\n\t\t\t\tfilterChanged({\n\t\t\t\t\tneighborhood_id: [{ text: location.name, value: location.id }],\n\t\t\t\t\testate_id: { text: location.estate.name, value: location.estate.id },\n\t\t\t\t\tsearchstring: null,\n\t\t\t\t});\n\t\t\telse\n\t\t\t\tfilterChanged({\n\t\t\t\t\tneighborhood_id: null,\n\t\t\t\t\testate_id: { text: location.name, value: location.id },\n\t\t\t\t\tsearchstring: null,\n\t\t\t\t});\n\t\t}\n\t};\n\n\t// hook output API\n\treturn {\n\t\tkeyword,\n\t\tlocation,\n\t\tshow: true,\n\t\tonSearch,\n\t\tonSelect,\n\t\tsearchResults: data,\n\t\tsearchLoading: loading,\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}