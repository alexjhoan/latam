{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { useFilters } from \"../Filters.hook\";\nconst KEYWORD_LOCATION_QUERY = gql`\n\tquery Location($strSearch: String!) {\n\t\tsearchLocation(searchTerm: $strSearch) {\n\t\t\t... on Estate {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t}\n\t\t\t... on Neighborhood {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\testate {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n\t\t\t__typename\n\t\t}\n\t}\n`;\nexport const useKeywordLocation = ({\n  filterChanged\n}) => {\n  // hook setup\n  const {\n    filters\n  } = useFilters();\n  const {\n    0: keyword,\n    1: setKeyWord\n  } = useState(\"\");\n  const {\n    0: location,\n    1: setLocation\n  } = useState(null);\n  useEffect(() => updateFilters(), [location]); // hook functions\n\n  const onSelect = (val, opt) => {\n    setLocation(opt);\n    setKeyWord(val);\n  };\n\n  const onSearch = val => {\n    setKeyWord(val);\n    if (val.length > 0) searchQuery({\n      variables: {\n        strSearch: val\n      }\n    });\n  };\n\n  const [searchQuery, {\n    data,\n    loading\n  }] = useLazyQuery(KEYWORD_LOCATION_QUERY);\n\n  const updateFilters = () => {\n    if (location) {\n      if (location.__typename == \"keyword\") {\n        filterChanged({\n          neighborhood_id: null,\n          estate_id: null,\n          searchstring: {\n            text: keyword,\n            value: keyword\n          }\n        });\n      } else if (location.estate) filterChanged({\n        neighborhood_id: [{\n          text: location.name,\n          value: location.id\n        }],\n        estate_id: {\n          text: location.estate.name,\n          value: location.estate.id\n        },\n        searchstring: null\n      });else filterChanged({\n        neighborhood_id: null,\n        estate_id: {\n          text: location.name,\n          value: location.id\n        },\n        searchstring: null\n      });\n    }\n  }; // hook output API\n\n\n  return {\n    keyword,\n    location,\n    show: true,\n    onSearch,\n    onSelect,\n    searchResults: data,\n    searchLoading: loading\n  };\n};","map":{"version":3,"sources":["/home/ansina/jsStuff/infocasas-landings/shared-components/Components/Filters/KeywordLocation/KeywordLocation.hook.tsx"],"names":["useState","useEffect","gql","useLazyQuery","useFilters","KEYWORD_LOCATION_QUERY","useKeywordLocation","filterChanged","filters","keyword","setKeyWord","location","setLocation","updateFilters","onSelect","val","opt","onSearch","length","searchQuery","variables","strSearch","data","loading","__typename","neighborhood_id","estate_id","searchstring","text","value","estate","name","id","show","searchResults","searchLoading"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,GAAT,EAAcC,YAAd,QAAkC,gBAAlC;AACA,SAASC,UAAT,QAA2B,iBAA3B;AAGA,MAAMC,sBAAsB,GAAGH,GAAI;;;;;;;;;;;;;;;;;;CAAnC;AAyBA,OAAO,MAAMI,kBAAkB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA6C;AAC9E;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcJ,UAAU,EAA9B;AACA,QAAM;AAAA,OAACK,OAAD;AAAA,OAAUC;AAAV,MAAwBV,QAAQ,CAAS,EAAT,CAAtC;AACA,QAAM;AAAA,OAACW,QAAD;AAAA,OAAWC;AAAX,MAA0BZ,QAAQ,CAAC,IAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAMY,aAAa,EAApB,EAAwB,CAACF,QAAD,CAAxB,CAAT,CAN8E,CAQ9E;;AACA,QAAMG,QAAQ,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC9BJ,IAAAA,WAAW,CAACI,GAAD,CAAX;AACAN,IAAAA,UAAU,CAACK,GAAD,CAAV;AACA,GAHD;;AAKA,QAAME,QAAQ,GAAIF,GAAD,IAAiB;AACjCL,IAAAA,UAAU,CAACK,GAAD,CAAV;AACA,QAAIA,GAAG,CAACG,MAAJ,GAAa,CAAjB,EAAoBC,WAAW,CAAC;AAAEC,MAAAA,SAAS,EAAE;AAAEC,QAAAA,SAAS,EAAEN;AAAb;AAAb,KAAD,CAAX;AACpB,GAHD;;AAKA,QAAM,CAACI,WAAD,EAAc;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAd,IAAmCpB,YAAY,CAACE,sBAAD,CAArD;;AAEA,QAAMQ,aAAa,GAAG,MAAM;AAC3B,QAAIF,QAAJ,EAAc;AACb,UAAIA,QAAQ,CAACa,UAAT,IAAuB,SAA3B,EAAsC;AACrCjB,QAAAA,aAAa,CAAC;AACbkB,UAAAA,eAAe,EAAE,IADJ;AAEbC,UAAAA,SAAS,EAAE,IAFE;AAGbC,UAAAA,YAAY,EAAE;AAAEC,YAAAA,IAAI,EAAEnB,OAAR;AAAiBoB,YAAAA,KAAK,EAAEpB;AAAxB;AAHD,SAAD,CAAb;AAKA,OAND,MAMO,IAAIE,QAAQ,CAACmB,MAAb,EACNvB,aAAa,CAAC;AACbkB,QAAAA,eAAe,EAAE,CAAC;AAAEG,UAAAA,IAAI,EAAEjB,QAAQ,CAACoB,IAAjB;AAAuBF,UAAAA,KAAK,EAAElB,QAAQ,CAACqB;AAAvC,SAAD,CADJ;AAEbN,QAAAA,SAAS,EAAE;AAAEE,UAAAA,IAAI,EAAEjB,QAAQ,CAACmB,MAAT,CAAgBC,IAAxB;AAA8BF,UAAAA,KAAK,EAAElB,QAAQ,CAACmB,MAAT,CAAgBE;AAArD,SAFE;AAGbL,QAAAA,YAAY,EAAE;AAHD,OAAD,CAAb,CADM,KAONpB,aAAa,CAAC;AACbkB,QAAAA,eAAe,EAAE,IADJ;AAEbC,QAAAA,SAAS,EAAE;AAAEE,UAAAA,IAAI,EAAEjB,QAAQ,CAACoB,IAAjB;AAAuBF,UAAAA,KAAK,EAAElB,QAAQ,CAACqB;AAAvC,SAFE;AAGbL,QAAAA,YAAY,EAAE;AAHD,OAAD,CAAb;AAKD;AACD,GArBD,CArB8E,CA4C9E;;;AACA,SAAO;AACNlB,IAAAA,OADM;AAENE,IAAAA,QAFM;AAGNsB,IAAAA,IAAI,EAAE,IAHA;AAINhB,IAAAA,QAJM;AAKNH,IAAAA,QALM;AAMNoB,IAAAA,aAAa,EAAEZ,IANT;AAONa,IAAAA,aAAa,EAAEZ;AAPT,GAAP;AASA,CAtDM","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { useFilters } from \"../Filters.hook\";\nimport { isTemporal } from \"../../../Utils/Functions\";\n\nconst KEYWORD_LOCATION_QUERY = gql`\n\tquery Location($strSearch: String!) {\n\t\tsearchLocation(searchTerm: $strSearch) {\n\t\t\t... on Estate {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t}\n\t\t\t... on Neighborhood {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\testate {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n\t\t\t__typename\n\t\t}\n\t}\n`;\n\nexport interface KeywordLocationProps {\n\tclassName?: string;\n\tfilterChanged: ({}: any) => void;\n}\n\nexport const useKeywordLocation = ({ filterChanged }: KeywordLocationProps) => {\n\t// hook setup\n\tconst { filters } = useFilters();\n\tconst [keyword, setKeyWord] = useState<string>(\"\");\n\tconst [location, setLocation] = useState(null);\n\n\tuseEffect(() => updateFilters(), [location]);\n\n\t// hook functions\n\tconst onSelect = (val, opt) => {\n\t\tsetLocation(opt);\n\t\tsetKeyWord(val);\n\t};\n\n\tconst onSearch = (val: string) => {\n\t\tsetKeyWord(val);\n\t\tif (val.length > 0) searchQuery({ variables: { strSearch: val } });\n\t};\n\n\tconst [searchQuery, { data, loading }] = useLazyQuery(KEYWORD_LOCATION_QUERY);\n\n\tconst updateFilters = () => {\n\t\tif (location) {\n\t\t\tif (location.__typename == \"keyword\") {\n\t\t\t\tfilterChanged({\n\t\t\t\t\tneighborhood_id: null,\n\t\t\t\t\testate_id: null,\n\t\t\t\t\tsearchstring: { text: keyword, value: keyword },\n\t\t\t\t});\n\t\t\t} else if (location.estate)\n\t\t\t\tfilterChanged({\n\t\t\t\t\tneighborhood_id: [{ text: location.name, value: location.id }],\n\t\t\t\t\testate_id: { text: location.estate.name, value: location.estate.id },\n\t\t\t\t\tsearchstring: null,\n\t\t\t\t});\n\t\t\telse\n\t\t\t\tfilterChanged({\n\t\t\t\t\tneighborhood_id: null,\n\t\t\t\t\testate_id: { text: location.name, value: location.id },\n\t\t\t\t\tsearchstring: null,\n\t\t\t\t});\n\t\t}\n\t};\n\n\t// hook output API\n\treturn {\n\t\tkeyword,\n\t\tlocation,\n\t\tshow: true,\n\t\tonSearch,\n\t\tonSelect,\n\t\tsearchResults: data,\n\t\tsearchLoading: loading,\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}