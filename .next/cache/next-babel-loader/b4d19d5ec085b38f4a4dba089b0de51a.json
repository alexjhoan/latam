{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"fragment fragment_\", \" on \", \" { \", \" }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useApolloClient } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\";\nimport md5 from \"js-md5\";\n\nvar singletonDefinedFragments = function () {\n  var fragments = {};\n\n  function key(id, typename, fields) {\n    return md5(typename + \";\" + id + \";\" + fields);\n  }\n\n  function newFragment(fragmentKey, id, typename, fields) {\n    var fragmentID = typename + \":\" + id;\n    return {\n      id: fragmentID,\n      fragment: gql(_templateObject(), fragmentKey, typename, fields)\n    };\n  }\n\n  return {\n    generate: function generate(id, typename, fields) {\n      var fragmentKey = key(id, typename, fields);\n\n      if (typeof fragments[fragmentKey] == \"undefined\") {\n        fragments[fragmentKey] = newFragment(fragmentKey, id, typename, fields);\n      }\n\n      return fragments[fragmentKey];\n    }\n  };\n}();\n\nexport var FragmentDefiner = /*#__PURE__*/function () {\n  function FragmentDefiner(typename, fields) {\n    _classCallCheck(this, FragmentDefiner);\n\n    this.typename = typename;\n    this.fields = fields;\n    this.fragments = [];\n  }\n\n  _createClass(FragmentDefiner, [{\n    key: \"uses\",\n    value: function uses() {\n      for (var _len = arguments.length, fragments = new Array(_len), _key = 0; _key < _len; _key++) {\n        fragments[_key] = arguments[_key];\n      }\n\n      this.fragments = [].concat(_toConsumableArray(this.fragments), fragments);\n      return this;\n    }\n  }, {\n    key: \"read\",\n    value: function read(id, customTypename) {\n      var fragment = singletonDefinedFragments.generate(id, customTypename ? customTypename : this.typename, this.fields);\n      ;\n      return fragment;\n    }\n  }, {\n    key: \"query\",\n    value: function query() {\n      var f = this.fragments.reduce(function (acc, o) {\n        return acc + \" \" + o.query();\n      }, \"\");\n      return \" ... on \".concat(this.typename, \" { \").concat(f, \" \").concat(this.fields, \" }\");\n    }\n  }]);\n\n  return FragmentDefiner;\n}();\nexport function useReadFragment(fragment, id, customTypename) {\n  _s();\n\n  var data = useApolloClient().readFragment(fragment.read(id, customTypename));\n  return {\n    loading: data == null,\n    data: data,\n    error: null\n  };\n}\n\n_s(useReadFragment, \"rYIOGpOVT1nML5yQlyP0VRs0Jno=\", false, function () {\n  return [useApolloClient];\n});","map":{"version":3,"sources":["/home/ansina/jsStuff/infocasas-landings/shared-components/GlobalHooks/useReadFragment.js"],"names":["useApolloClient","gql","md5","singletonDefinedFragments","fragments","key","id","typename","fields","newFragment","fragmentKey","fragmentID","fragment","generate","FragmentDefiner","customTypename","f","reduce","acc","o","query","useReadFragment","data","readFragment","read","loading","error"],"mappings":";;;;;;;;;;;;;;;;;AAAA,SAAQA,eAAR,QAA8B,gBAA9B;AACA,SAAQC,GAAR,QAAkB,gBAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;;AAEA,IAAIC,yBAAyB,GAAI,YAAW;AACxC,MAAIC,SAAS,GAAG,EAAhB;;AAEA,WAASC,GAAT,CAAcC,EAAd,EAAkBC,QAAlB,EAA4BC,MAA5B,EAAoC;AAChC,WAAON,GAAG,CAACK,QAAQ,GAAC,GAAT,GAAaD,EAAb,GAAgB,GAAhB,GAAoBE,MAArB,CAAV;AACH;;AAED,WAASC,WAAT,CAAqBC,WAArB,EAAiCJ,EAAjC,EAAqCC,QAArC,EAA+CC,MAA/C,EAAuD;AACnD,QAAMG,UAAU,GAAGJ,QAAQ,GAAG,GAAX,GAAiBD,EAApC;AACA,WAAO;AACHA,MAAAA,EAAE,EAAEK,UADD;AAEHC,MAAAA,QAAQ,EAAEX,GAAF,oBAA0BS,WAA1B,EAA4CH,QAA5C,EAA0DC,MAA1D;AAFL,KAAP;AAKH;;AAED,SAAO;AACHK,IAAAA,QAAQ,EAAE,kBAAUP,EAAV,EAAaC,QAAb,EAAsBC,MAAtB,EAA8B;AACpC,UAAME,WAAW,GAAGL,GAAG,CAACC,EAAD,EAAIC,QAAJ,EAAaC,MAAb,CAAvB;;AACA,UAAI,OAAOJ,SAAS,CAACM,WAAD,CAAhB,IAAiC,WAArC,EAAkD;AAC9CN,QAAAA,SAAS,CAACM,WAAD,CAAT,GAAyBD,WAAW,CAACC,WAAD,EAAaJ,EAAb,EAAgBC,QAAhB,EAAyBC,MAAzB,CAApC;AACH;;AACD,aAAOJ,SAAS,CAACM,WAAD,CAAhB;AAEH;AARE,GAAP;AAWH,CA3B+B,EAAhC;;AA8BA,WAAaI,eAAb;AACI,2BAAYP,QAAZ,EAAqBC,MAArB,EAA6B;AAAA;;AACzB,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKJ,SAAL,GAAiB,EAAjB;AACH;;AALL;AAAA;AAAA,2BAOuB;AAAA,wCAAXA,SAAW;AAAXA,QAAAA,SAAW;AAAA;;AACf,WAAKA,SAAL,gCAAqB,KAAKA,SAA1B,GAAuCA,SAAvC;AACA,aAAO,IAAP;AACH;AAVL;AAAA;AAAA,yBAYSE,EAZT,EAYYS,cAZZ,EAY4B;AACpB,UAAMH,QAAQ,GAAGT,yBAAyB,CAACU,QAA1B,CAAmCP,EAAnC,EAAuCS,cAAc,GAACA,cAAD,GAAgB,KAAKR,QAA1E,EAAoF,KAAKC,MAAzF,CAAjB;AAAkH;AAClH,aAAOI,QAAP;AACH;AAfL;AAAA;AAAA,4BAiBY;AACJ,UAAMI,CAAC,GAAG,KAAKZ,SAAL,CAAea,MAAf,CAAsB,UAACC,GAAD,EAAKC,CAAL,EAAW;AACvC,eAAOD,GAAG,GAAG,GAAN,GAAYC,CAAC,CAACC,KAAF,EAAnB;AACH,OAFS,EAER,EAFQ,CAAV;AAIA,+BAAkB,KAAKb,QAAvB,gBAAqCS,CAArC,cAA0C,KAAKR,MAA/C;AACH;AAvBL;;AAAA;AAAA;AA4BA,OAAO,SAASa,eAAT,CAAyBT,QAAzB,EAAmCN,EAAnC,EAAuCS,cAAvC,EAAuD;AAAA;;AAE1D,MAAMO,IAAI,GAAGtB,eAAe,GAAGuB,YAAlB,CAA+BX,QAAQ,CAACY,IAAT,CAAclB,EAAd,EAAkBS,cAAlB,CAA/B,CAAb;AAEA,SAAO;AAAEU,IAAAA,OAAO,EAAEH,IAAI,IAAE,IAAjB;AAAuBA,IAAAA,IAAI,EAAJA,IAAvB;AAA6BI,IAAAA,KAAK,EAAE;AAApC,GAAP;AACH;;GALeL,e;UAECrB,e","sourcesContent":["import {useApolloClient} from \"@apollo/client\";\nimport {gql} from \"@apollo/client\";\nimport md5 from \"js-md5\";\n\nvar singletonDefinedFragments = (function() {\n    let fragments = {};\n\n    function key (id, typename, fields) {\n        return md5(typename+\";\"+id+\";\"+fields);\n    }\n\n    function newFragment(fragmentKey,id, typename, fields) {\n        const fragmentID = typename + \":\" + id;\n        return {\n            id: fragmentID,\n            fragment: gql`fragment fragment_${fragmentKey} on ${typename} { ${fields } }`\n        };\n\n    }\n\n    return {\n        generate: function (id,typename,fields) {\n            const fragmentKey = key(id,typename,fields);\n            if (typeof fragments[fragmentKey] == \"undefined\") {\n                fragments[fragmentKey] = newFragment(fragmentKey,id,typename,fields);\n            }\n            return fragments[fragmentKey];\n\n        },\n\n    };\n})();\n\n\nexport class FragmentDefiner {\n    constructor(typename,fields) {\n        this.typename = typename;\n        this.fields = fields;\n        this.fragments = [];\n    }\n\n    uses(...fragments) {\n        this.fragments = [...this.fragments,...fragments];\n        return this;\n    }\n\n    read(id,customTypename) {\n        const fragment = singletonDefinedFragments.generate(id, customTypename?customTypename:this.typename, this.fields);;\n        return fragment;\n    }\n\n    query() {\n        const f = this.fragments.reduce((acc,o) => {\n            return acc + \" \" + o.query()\n        },\"\");\n\n        return ` ... on ${this.typename} { ${f} ${this.fields} }`\n    }\n\n\n}\n\nexport function useReadFragment(fragment, id, customTypename) {\n\n    const data = useApolloClient().readFragment(fragment.read(id, customTypename));\n\n    return { loading: data==null, data, error: null }\n}\n"]},"metadata":{},"sourceType":"module"}