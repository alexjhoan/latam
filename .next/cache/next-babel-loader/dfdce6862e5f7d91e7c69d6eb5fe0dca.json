{"ast":null,"code":"import { gql, useMutation } from \"@apollo/client\";\nimport { useUser } from \"../User.hook\";\nconst CHANGE_STATUS_MUTATION = gql`\n\tmutation changeNotificationStatus($id: ID!, $seen: Boolean!) {\n\t\tnotificationSetSeen(id: $id, seen: $seen) {\n\t\t\tid\n\t\t}\n\t}\n`;\nconst ALL_NOTIFICATION_SEEN_MUTATION = gql`\n\tmutation changeNotificationsStatus {\n\t\tnotificationSeeAll\n\t}\n`;\nexport const useNotifications = () => {\n  var _user$data, _user$data2;\n\n  const {\n    user\n  } = useUser();\n  const [changeNotification, {\n    loading\n  }] = useMutation(CHANGE_STATUS_MUTATION, {\n    onCompleted: response => user.refetch(),\n    onError: error => console.error(error)\n  });\n\n  const changeNotificationStatus = (id, status) => {\n    changeNotification({\n      variables: {\n        seen: status,\n        id: id\n      }\n    });\n  };\n\n  const [setAllNotificationSeen, {\n    loading: loadingAll\n  }] = useMutation(ALL_NOTIFICATION_SEEN_MUTATION, {\n    onCompleted: response => user.refetch(),\n    onError: error => console.error(error)\n  });\n  return {\n    notifications: user === null || user === void 0 ? void 0 : (_user$data = user.data) === null || _user$data === void 0 ? void 0 : _user$data.me.notifications.data,\n    unread_notifications: user === null || user === void 0 ? void 0 : (_user$data2 = user.data) === null || _user$data2 === void 0 ? void 0 : _user$data2.me.unread_notifications,\n    changeNotificationStatus,\n    loadingChange: loading,\n    setAllNotificationSeen,\n    loadingAll: loadingAll,\n    loadingUser: user.loading\n  };\n};","map":{"version":3,"sources":["/home/ansina/jsStuff/infocasas-landings/shared-components/Components/User/NotificationList/hook.tsx"],"names":["gql","useMutation","useUser","CHANGE_STATUS_MUTATION","ALL_NOTIFICATION_SEEN_MUTATION","useNotifications","user","changeNotification","loading","onCompleted","response","refetch","onError","error","console","changeNotificationStatus","id","status","variables","seen","setAllNotificationSeen","loadingAll","notifications","data","me","unread_notifications","loadingChange","loadingUser"],"mappings":"AAAA,SAASA,GAAT,EAAcC,WAAd,QAAiC,gBAAjC;AACA,SAASC,OAAT,QAAwB,cAAxB;AAEA,MAAMC,sBAAsB,GAAGH,GAAI;;;;;;CAAnC;AAQA,MAAMI,8BAA8B,GAAGJ,GAAI;;;;CAA3C;AAMA,OAAO,MAAMK,gBAAgB,GAAG,MAAM;AAAA;;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAWJ,OAAO,EAAxB;AAEA,QAAM,CAACK,kBAAD,EAAqB;AAAEC,IAAAA;AAAF,GAArB,IAAoCP,WAAW,CAACE,sBAAD,EAAyB;AAC7EM,IAAAA,WAAW,EAAEC,QAAQ,IAAIJ,IAAI,CAACK,OAAL,EADoD;AAE7EC,IAAAA,OAAO,EAAEC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd;AAF2D,GAAzB,CAArD;;AAKA,QAAME,wBAAwB,GAAG,CAACC,EAAD,EAAKC,MAAL,KAAgB;AAChDV,IAAAA,kBAAkB,CAAC;AAAEW,MAAAA,SAAS,EAAE;AAAEC,QAAAA,IAAI,EAAEF,MAAR;AAAgBD,QAAAA,EAAE,EAAEA;AAApB;AAAb,KAAD,CAAlB;AACA,GAFD;;AAIA,QAAM,CAACI,sBAAD,EAAyB;AAAEZ,IAAAA,OAAO,EAAEa;AAAX,GAAzB,IAAoDpB,WAAW,CACpEG,8BADoE,EAEpE;AACCK,IAAAA,WAAW,EAAEC,QAAQ,IAAIJ,IAAI,CAACK,OAAL,EAD1B;AAECC,IAAAA,OAAO,EAAEC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd;AAFnB,GAFoE,CAArE;AAQA,SAAO;AACNS,IAAAA,aAAa,EAAEhB,IAAF,aAAEA,IAAF,qCAAEA,IAAI,CAAEiB,IAAR,+CAAE,WAAYC,EAAZ,CAAeF,aAAf,CAA6BC,IADtC;AAENE,IAAAA,oBAAoB,EAAEnB,IAAF,aAAEA,IAAF,sCAAEA,IAAI,CAAEiB,IAAR,gDAAE,YAAYC,EAAZ,CAAeC,oBAF/B;AAGNV,IAAAA,wBAHM;AAINW,IAAAA,aAAa,EAAElB,OAJT;AAKNY,IAAAA,sBALM;AAMNC,IAAAA,UAAU,EAAEA,UANN;AAONM,IAAAA,WAAW,EAAErB,IAAI,CAACE;AAPZ,GAAP;AASA,CA7BM","sourcesContent":["import { gql, useMutation } from \"@apollo/client\";\nimport { useUser } from \"../User.hook\";\n\nconst CHANGE_STATUS_MUTATION = gql`\n\tmutation changeNotificationStatus($id: ID!, $seen: Boolean!) {\n\t\tnotificationSetSeen(id: $id, seen: $seen) {\n\t\t\tid\n\t\t}\n\t}\n`;\n\nconst ALL_NOTIFICATION_SEEN_MUTATION = gql`\n\tmutation changeNotificationsStatus {\n\t\tnotificationSeeAll\n\t}\n`;\n\nexport const useNotifications = () => {\n\tconst { user } = useUser();\n\n\tconst [changeNotification, { loading }] = useMutation(CHANGE_STATUS_MUTATION, {\n\t\tonCompleted: response => user.refetch(),\n\t\tonError: error => console.error(error),\n\t});\n\n\tconst changeNotificationStatus = (id, status) => {\n\t\tchangeNotification({ variables: { seen: status, id: id } });\n\t};\n\n\tconst [setAllNotificationSeen, { loading: loadingAll }] = useMutation(\n\t\tALL_NOTIFICATION_SEEN_MUTATION,\n\t\t{\n\t\t\tonCompleted: response => user.refetch(),\n\t\t\tonError: error => console.error(error),\n\t\t}\n\t);\n\n\treturn {\n\t\tnotifications: user?.data?.me.notifications.data,\n\t\tunread_notifications: user?.data?.me.unread_notifications,\n\t\tchangeNotificationStatus,\n\t\tloadingChange: loading,\n\t\tsetAllNotificationSeen,\n\t\tloadingAll: loadingAll,\n\t\tloadingUser: user.loading,\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}