{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from \"react\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport { CURRENT_USER_QUERY, LOGIN_MUTATION, LOGOUT_MUTATION, REGISTER_MUTATION, USER_EXISTS_QUERY, SOCIAL_LOGIN_MUTATION, FORGOT_PASSWORD_MUTATION, GOOGLE_ONE_TAP_MUTATION } from \"./User.querys\";\nimport { useQuerySkipAuth } from \"../../GlobalHooks/useQuerySkipAuth\";\n\nvar useUser = function useUser() {\n  _s();\n\n  var _useQuerySkipAuth = useQuerySkipAuth(CURRENT_USER_QUERY),\n      data = _useQuerySkipAuth.data,\n      loading = _useQuerySkipAuth.loading,\n      error = _useQuerySkipAuth.error,\n      refetch = _useQuerySkipAuth.refetch;\n\n  var _useState = useState({\n    email: \"\",\n    password: \"\"\n  }),\n      userInput = _useState[0],\n      setUserInput = _useState[1];\n\n  var _useState2 = useState([]),\n      validationErrors = _useState2[0],\n      setValidationErrors = _useState2[1];\n\n  var errorHandler = function errorHandler(errors) {\n    var valErrors = [];\n    errors.graphQLErrors.forEach(function (err) {\n      if (err.extensions.category == \"validation\") {\n        for (var _i = 0, _Object$entries = Object.entries(err.extensions.validation); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n              key = _Object$entries$_i[0],\n              value = _Object$entries$_i[1];\n\n          valErrors.push(value[0]);\n        }\n      } else if (err.extensions.category == \"authentication\") {\n        valErrors.push(err.message);\n      }\n    });\n    setValidationErrors(valErrors);\n  };\n  /* Log In */\n\n\n  var _useMutation = useMutation(LOGIN_MUTATION, {\n    onError: function onError(errors) {\n      return errorHandler(errors);\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      loginMutation = _useMutation2[0],\n      loginResponse = _useMutation2[1];\n\n  var sendLogin = function sendLogin() {\n    setValidationErrors([]);\n    loginMutation({\n      variables: {\n        email: userInput.email,\n        pass: userInput.password\n      }\n    });\n  };\n  /* End Log In */\n\n  /* Register */\n\n\n  var _useMutation3 = useMutation(REGISTER_MUTATION, {\n    onError: function onError(errors) {\n      return errorHandler(errors);\n    }\n  }),\n      _useMutation4 = _slicedToArray(_useMutation3, 2),\n      registerMutation = _useMutation4[0],\n      registerResponse = _useMutation4[1];\n\n  var sendRegister = function sendRegister() {\n    setValidationErrors([]);\n    registerMutation({\n      variables: {\n        email: userInput.email,\n        pass: userInput.password\n      }\n    });\n  };\n\n  var sendFastRegister = function sendFastRegister() {\n    setValidationErrors([]);\n    registerMutation({\n      variables: {\n        email: userInput.email\n      }\n    });\n  };\n  /* End Register */\n\n  /* User Exists */\n\n\n  var _useLazyQuery = useLazyQuery(USER_EXISTS_QUERY, {\n    onError: function onError(errors) {\n      return errorHandler(errors);\n    },\n    fetchPolicy: \"no-cache\"\n  }),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n      userExists = _useLazyQuery2[0],\n      userExistsResponse = _useLazyQuery2[1];\n\n  var sendUserExist = function sendUserExist() {\n    setValidationErrors([]);\n    userExists({\n      variables: {\n        email: userInput.email\n      }\n    });\n  };\n  /* End User Exists */\n\n  /* Social Login */\n\n\n  var _useMutation5 = useMutation(SOCIAL_LOGIN_MUTATION, {\n    onError: function onError(errors) {\n      return errorHandler(errors);\n    }\n  }),\n      _useMutation6 = _slicedToArray(_useMutation5, 2),\n      loginSocial = _useMutation6[0],\n      socialResponse = _useMutation6[1];\n\n  var sendSocialLogin = function sendSocialLogin(variables) {\n    setValidationErrors([]);\n    loginSocial({\n      variables: _objectSpread({}, variables)\n    });\n  };\n  /* End Social Login */\n\n  /* One Tap Sign In */\n\n\n  var _useMutation7 = useMutation(GOOGLE_ONE_TAP_MUTATION),\n      _useMutation8 = _slicedToArray(_useMutation7, 2),\n      MUTATOR_ONE_TAP_SIGN_IN = _useMutation8[0],\n      responseOneTapSignIn = _useMutation8[1];\n\n  var sendOneTapSignIn = function sendOneTapSignIn(variables) {\n    return MUTATOR_ONE_TAP_SIGN_IN({\n      variables: _objectSpread({}, variables)\n    });\n  };\n  /* End One Tap Sign In */\n\n  /* Forget Password */\n\n\n  var _useMutation9 = useMutation(FORGOT_PASSWORD_MUTATION, {\n    onError: function onError(errors) {\n      return errorHandler(errors);\n    }\n  }),\n      _useMutation10 = _slicedToArray(_useMutation9, 2),\n      forgotPassword = _useMutation10[0],\n      forgotPasswordResponse = _useMutation10[1];\n\n  var sendForgotPassword = function sendForgotPassword() {\n    setValidationErrors([]);\n    forgotPassword({\n      variables: {\n        email: userInput.email\n      }\n    });\n  };\n  /* End Forget Password */\n\n  /* Log Out */\n\n\n  var _useMutation11 = useMutation(LOGOUT_MUTATION),\n      _useMutation12 = _slicedToArray(_useMutation11, 2),\n      logoutMutation = _useMutation12[0],\n      logoutResponse = _useMutation12[1];\n  /* End Log Out */\n\n\n  return {\n    user: {\n      data: data,\n      loading: loading,\n      error: error,\n      refetch: refetch\n    },\n    isLoggedIn: !error && data && (data === null || data === void 0 ? void 0 : data.me) != null && data.me.id ? true : false,\n    userInput: {\n      value: userInput,\n      set: setUserInput\n    },\n    login: {\n      send: sendLogin,\n      response: loginResponse\n    },\n    logout: {\n      send: logoutMutation,\n      response: logoutResponse\n    },\n    register: {\n      send: sendRegister,\n      doLater: sendFastRegister,\n      response: registerResponse\n    },\n    userExists: {\n      send: sendUserExist,\n      response: userExistsResponse\n    },\n    socialLogin: {\n      send: sendSocialLogin,\n      response: socialResponse\n    },\n    oneTapSignIn: {\n      send: sendOneTapSignIn,\n      response: responseOneTapSignIn\n    },\n    forgotPassword: {\n      send: sendForgotPassword,\n      response: forgotPasswordResponse\n    },\n    validationErrors: {\n      errors: validationErrors,\n      set: setValidationErrors\n    }\n  };\n};\n\n_s(useUser, \"P5qq0ghjzrhKjIvVUZkd4z9x1Ok=\", false, function () {\n  return [useQuerySkipAuth, useMutation, useMutation, useLazyQuery, useMutation, useMutation, useMutation, useMutation];\n});\n\nexport { useUser };","map":{"version":3,"sources":["/home/ansina/jsStuff/infocasas-landings/shared-components/Components/User/User.hook.tsx"],"names":["useState","useMutation","useLazyQuery","CURRENT_USER_QUERY","LOGIN_MUTATION","LOGOUT_MUTATION","REGISTER_MUTATION","USER_EXISTS_QUERY","SOCIAL_LOGIN_MUTATION","FORGOT_PASSWORD_MUTATION","GOOGLE_ONE_TAP_MUTATION","useQuerySkipAuth","useUser","data","loading","error","refetch","email","password","userInput","setUserInput","validationErrors","setValidationErrors","errorHandler","errors","valErrors","graphQLErrors","forEach","err","extensions","category","Object","entries","validation","key","value","push","message","onError","loginMutation","loginResponse","sendLogin","variables","pass","registerMutation","registerResponse","sendRegister","sendFastRegister","fetchPolicy","userExists","userExistsResponse","sendUserExist","loginSocial","socialResponse","sendSocialLogin","MUTATOR_ONE_TAP_SIGN_IN","responseOneTapSignIn","sendOneTapSignIn","forgotPassword","forgotPasswordResponse","sendForgotPassword","logoutMutation","logoutResponse","user","isLoggedIn","me","id","set","login","send","response","logout","register","doLater","socialLogin","oneTapSignIn"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { ApolloError, useMutation, useLazyQuery } from \"@apollo/client\";\nimport {\n\tCURRENT_USER_QUERY,\n\tLOGIN_MUTATION,\n\tLOGOUT_MUTATION,\n\tREGISTER_MUTATION,\n\tUSER_EXISTS_QUERY,\n\tSOCIAL_LOGIN_MUTATION,\n\tFORGOT_PASSWORD_MUTATION,\n\tGOOGLE_ONE_TAP_MUTATION,\n} from \"./User.querys\";\nimport { useQuerySkipAuth } from \"../../GlobalHooks/useQuerySkipAuth\";\n\ntype UserInput = { email: string; password: string };\n\ninterface UserHookInterface {\n\tuser: {\n\t\tdata: any;\n\t\tloading: boolean;\n\t\terror: ApolloError | undefined;\n\t\trefetch: Function;\n\t};\n\tisLoggedIn: boolean;\n\tuserInput: {\n\t\tvalue: UserInput;\n\t\tset: ({ email, password }: UserInput) => void;\n\t};\n\tlogin: { send: () => void; response: any };\n\tlogout: { send: () => Promise<any>; response: any };\n\tregister: { send: () => void; doLater: () => void; response: any };\n\tuserExists: { send: () => void; response: any };\n\tforgotPassword: { send: () => void; response: any };\n\tsocialLogin: { send: (x: any) => void; response: any };\n\toneTapSignIn: { send: (x: any) => void; response: any };\n\tvalidationErrors: { errors: string[]; set: (x: string[]) => void };\n}\n\nconst useUser = (): UserHookInterface => {\n\tconst { data, loading, error, refetch } = useQuerySkipAuth(CURRENT_USER_QUERY);\n\tconst [userInput, setUserInput] = useState({ email: \"\", password: \"\" });\n\tconst [validationErrors, setValidationErrors] = useState<string[]>([]);\n\n\tconst errorHandler = (errors: ApolloError) => {\n\t\tlet valErrors: string[] = [];\n\t\terrors.graphQLErrors.forEach(err => {\n\t\t\tif (err.extensions.category == \"validation\") {\n\t\t\t\tfor (const [key, value] of Object.entries(err.extensions.validation)) {\n\t\t\t\t\tvalErrors.push(value[0]);\n\t\t\t\t}\n\t\t\t} else if (err.extensions.category == \"authentication\") {\n\t\t\t\tvalErrors.push(err.message);\n\t\t\t}\n\t\t});\n\t\tsetValidationErrors(valErrors);\n\t};\n\n\t/* Log In */\n\tconst [loginMutation, loginResponse] = useMutation(LOGIN_MUTATION, {\n\t\tonError: (errors: ApolloError) => errorHandler(errors),\n\t});\n\tconst sendLogin = () => {\n\t\tsetValidationErrors([]);\n\t\tloginMutation({\n\t\t\tvariables: {\n\t\t\t\temail: userInput.email,\n\t\t\t\tpass: userInput.password,\n\t\t\t},\n\t\t});\n\t};\n\t/* End Log In */\n\n\t/* Register */\n\tconst [registerMutation, registerResponse] = useMutation(REGISTER_MUTATION, {\n\t\tonError: (errors: ApolloError) => errorHandler(errors),\n\t});\n\tconst sendRegister = () => {\n\t\tsetValidationErrors([]);\n\t\tregisterMutation({\n\t\t\tvariables: {\n\t\t\t\temail: userInput.email,\n\t\t\t\tpass: userInput.password,\n\t\t\t},\n\t\t});\n\t};\n\tconst sendFastRegister = () => {\n\t\tsetValidationErrors([]);\n\t\tregisterMutation({\n\t\t\tvariables: { email: userInput.email },\n\t\t});\n\t};\n\t/* End Register */\n\n\t/* User Exists */\n\tconst [userExists, userExistsResponse] = useLazyQuery(USER_EXISTS_QUERY, {\n\t\tonError: (errors: ApolloError) => errorHandler(errors),\n\t\tfetchPolicy: \"no-cache\",\n\t});\n\tconst sendUserExist = () => {\n\t\tsetValidationErrors([]);\n\t\tuserExists({ variables: { email: userInput.email } });\n\t};\n\t/* End User Exists */\n\n\t/* Social Login */\n\tconst [loginSocial, socialResponse] = useMutation(SOCIAL_LOGIN_MUTATION, {\n\t\tonError: (errors: ApolloError) => errorHandler(errors),\n\t});\n\tconst sendSocialLogin = variables => {\n\t\tsetValidationErrors([]);\n\t\tloginSocial({ variables: { ...variables } });\n\t};\n\t/* End Social Login */\n\n\t/* One Tap Sign In */\n\tconst [MUTATOR_ONE_TAP_SIGN_IN, responseOneTapSignIn] = useMutation(GOOGLE_ONE_TAP_MUTATION);\n\tconst sendOneTapSignIn = variables => MUTATOR_ONE_TAP_SIGN_IN({ variables: { ...variables } });\n\t/* End One Tap Sign In */\n\n\t/* Forget Password */\n\tconst [forgotPassword, forgotPasswordResponse] = useMutation(FORGOT_PASSWORD_MUTATION, {\n\t\tonError: (errors: ApolloError) => errorHandler(errors),\n\t});\n\tconst sendForgotPassword = () => {\n\t\tsetValidationErrors([]);\n\t\tforgotPassword({ variables: { email: userInput.email } });\n\t};\n\t/* End Forget Password */\n\n\t/* Log Out */\n\tconst [logoutMutation, logoutResponse] = useMutation(LOGOUT_MUTATION);\n\t/* End Log Out */\n\n\treturn {\n\t\tuser: { data: data, loading: loading, error: error, refetch },\n\t\tisLoggedIn: !error && data && data?.me != null && data.me.id ? true : false,\n\t\tuserInput: {\n\t\t\tvalue: userInput,\n\t\t\tset: setUserInput,\n\t\t},\n\t\tlogin: {\n\t\t\tsend: sendLogin,\n\t\t\tresponse: loginResponse,\n\t\t},\n\t\tlogout: { send: logoutMutation, response: logoutResponse },\n\t\tregister: {\n\t\t\tsend: sendRegister,\n\t\t\tdoLater: sendFastRegister,\n\t\t\tresponse: registerResponse,\n\t\t},\n\t\tuserExists: {\n\t\t\tsend: sendUserExist,\n\t\t\tresponse: userExistsResponse,\n\t\t},\n\t\tsocialLogin: {\n\t\t\tsend: sendSocialLogin,\n\t\t\tresponse: socialResponse,\n\t\t},\n\t\toneTapSignIn: {\n\t\t\tsend: sendOneTapSignIn,\n\t\t\tresponse: responseOneTapSignIn,\n\t\t},\n\t\tforgotPassword: {\n\t\t\tsend: sendForgotPassword,\n\t\t\tresponse: forgotPasswordResponse,\n\t\t},\n\t\tvalidationErrors: {\n\t\t\terrors: validationErrors,\n\t\t\tset: setValidationErrors,\n\t\t},\n\t};\n};\n\nexport { useUser };\n"]},"metadata":{},"sourceType":"module"}