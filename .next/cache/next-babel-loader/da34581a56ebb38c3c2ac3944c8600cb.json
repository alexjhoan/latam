{"ast":null,"code":"import { FragmentDefiner, useReadFragment } from \"../../../GlobalHooks/useReadFragment\";\nimport { useFilters } from \"../Filters.hook\";\nconst FRAGMENT_OPERATIONTYPES_OPTIONS = new FragmentDefiner(\"Filter\", `\n      id\n      name\n      options\n`);\nexport const FRAGMENT_OPERATIONTYPES = new FragmentDefiner(\"Filters\", `\n    operationType {\n      ${FRAGMENT_OPERATIONTYPES_OPTIONS.query()}\n    }\n`);\n\nconst useOperationType = props => {\n  const {\n    filters,\n    changeFilters\n  } = useFilters();\n  const {\n    labeled = false,\n    selectedValue = filters === null || filters === void 0 ? void 0 : filters.operation_type_id,\n    inputType = \"select\",\n    currentFilters = filters,\n    filterChanged = changeFilters\n  } = props;\n  const {\n    loading,\n    data,\n    error\n  } = useReadFragment(FRAGMENT_OPERATIONTYPES_OPTIONS, \"operationType\");\n\n  const onChange = newOperation => {\n    filterChanged({\n      operation_type_id: newOperation ? {\n        value: newOperation.operation_type_id,\n        text: newOperation.name\n      } : null\n    });\n  };\n\n  return {\n    loading: loading,\n    error: error,\n    data: {\n      options: data === null || data === void 0 ? void 0 : data.options,\n      value: selectedValue,\n      onChange,\n      customKey: \"operation_type_id\"\n    },\n    show: true,\n    labeled,\n    label: data === null || data === void 0 ? void 0 : data.name,\n    inputType\n  };\n};\n\nexport { useOperationType };","map":{"version":3,"sources":["/home/ansina/jsStuff/infocasas-landings/shared-components/Components/Filters/OperationType/OperationType.hook.tsx"],"names":["FragmentDefiner","useReadFragment","useFilters","FRAGMENT_OPERATIONTYPES_OPTIONS","FRAGMENT_OPERATIONTYPES","query","useOperationType","props","filters","changeFilters","labeled","selectedValue","operation_type_id","inputType","currentFilters","filterChanged","loading","data","error","onChange","newOperation","value","text","name","options","customKey","show","label"],"mappings":"AACA,SAASA,eAAT,EAA0BC,eAA1B,QAAiD,sCAAjD;AACA,SAASC,UAAT,QAA2B,iBAA3B;AAEA,MAAMC,+BAA+B,GAAG,IAAIH,eAAJ,CACvC,QADuC,EAEtC;;;;CAFsC,CAAxC;AAQA,OAAO,MAAMI,uBAAuB,GAAG,IAAIJ,eAAJ,CACtC,SADsC,EAErC;;QAEMG,+BAA+B,CAACE,KAAhC,EAAwC;;CAJT,CAAhC;;AASP,MAAMC,gBAAgB,GAAGC,KAAK,IAAI;AACjC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA6BP,UAAU,EAA7C;AACA,QAAM;AACLQ,IAAAA,OAAO,GAAG,KADL;AAELC,IAAAA,aAAa,GAAGH,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEI,iBAFpB;AAGLC,IAAAA,SAAS,GAAG,QAHP;AAILC,IAAAA,cAAc,GAAGN,OAJZ;AAKLO,IAAAA,aAAa,GAAGN;AALX,MAMFF,KANJ;AAOA,QAAM;AAAES,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,MAA2BjB,eAAe,CAC/CE,+BAD+C,EAE/C,eAF+C,CAAhD;;AAKA,QAAMgB,QAAQ,GAAGC,YAAY,IAAI;AAChCL,IAAAA,aAAa,CAAC;AACbH,MAAAA,iBAAiB,EAAEQ,YAAY,GAC5B;AAAEC,QAAAA,KAAK,EAAED,YAAY,CAACR,iBAAtB;AAAyCU,QAAAA,IAAI,EAAEF,YAAY,CAACG;AAA5D,OAD4B,GAE5B;AAHU,KAAD,CAAb;AAKA,GAND;;AAQA,SAAO;AACNP,IAAAA,OAAO,EAAEA,OADH;AAENE,IAAAA,KAAK,EAAEA,KAFD;AAGND,IAAAA,IAAI,EAAE;AACLO,MAAAA,OAAO,EAAEP,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEO,OADV;AAELH,MAAAA,KAAK,EAAEV,aAFF;AAGLQ,MAAAA,QAHK;AAILM,MAAAA,SAAS,EAAE;AAJN,KAHA;AASNC,IAAAA,IAAI,EAAE,IATA;AAUNhB,IAAAA,OAVM;AAWNiB,IAAAA,KAAK,EAAEV,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEM,IAXP;AAYNV,IAAAA;AAZM,GAAP;AAcA,CApCD;;AAsCA,SAASP,gBAAT","sourcesContent":["import { SelectTypes } from \"../../Inputs/Selects/Selects.hook\";\nimport { FragmentDefiner, useReadFragment } from \"../../../GlobalHooks/useReadFragment\";\nimport { useFilters } from \"../Filters.hook\";\n\nconst FRAGMENT_OPERATIONTYPES_OPTIONS = new FragmentDefiner(\n\t\"Filter\",\n\t`\n      id\n      name\n      options\n`\n);\nexport const FRAGMENT_OPERATIONTYPES = new FragmentDefiner(\n\t\"Filters\",\n\t`\n    operationType {\n      ${FRAGMENT_OPERATIONTYPES_OPTIONS.query()}\n    }\n`\n);\n\nconst useOperationType = props => {\n\tconst { filters, changeFilters } = useFilters();\n\tconst {\n\t\tlabeled = false,\n\t\tselectedValue = filters?.operation_type_id,\n\t\tinputType = \"select\",\n\t\tcurrentFilters = filters,\n\t\tfilterChanged = changeFilters,\n\t} = props;\n\tconst { loading, data, error } = useReadFragment(\n\t\tFRAGMENT_OPERATIONTYPES_OPTIONS,\n\t\t\"operationType\"\n\t);\n\n\tconst onChange = newOperation => {\n\t\tfilterChanged({\n\t\t\toperation_type_id: newOperation\n\t\t\t\t? { value: newOperation.operation_type_id, text: newOperation.name }\n\t\t\t\t: null,\n\t\t});\n\t};\n\n\treturn {\n\t\tloading: loading,\n\t\terror: error,\n\t\tdata: {\n\t\t\toptions: data?.options,\n\t\t\tvalue: selectedValue,\n\t\t\tonChange,\n\t\t\tcustomKey: \"operation_type_id\",\n\t\t},\n\t\tshow: true,\n\t\tlabeled,\n\t\tlabel: data?.name,\n\t\tinputType,\n\t};\n};\n\nexport { useOperationType };\n"]},"metadata":{},"sourceType":"module"}