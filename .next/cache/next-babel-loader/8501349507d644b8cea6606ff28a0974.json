{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from \"react\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport { CURRENT_USER_QUERY, LOGIN_MUTATION, LOGOUT_MUTATION, REGISTER_MUTATION, USER_EXISTS_QUERY, SOCIAL_LOGIN_MUTATION, FORGOT_PASSWORD_MUTATION, GOOGLE_ONE_TAP_MUTATION } from \"./User.querys\";\nimport { useQuerySkipAuth } from \"../../GlobalHooks/useQuerySkipAuth\";\n\nconst useUser = () => {\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useQuerySkipAuth(CURRENT_USER_QUERY);\n  const {\n    0: userInput,\n    1: setUserInput\n  } = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const {\n    0: validationErrors,\n    1: setValidationErrors\n  } = useState([]);\n\n  const errorHandler = errors => {\n    let valErrors = [];\n    errors.graphQLErrors.forEach(err => {\n      if (err.extensions.category == \"validation\") {\n        for (const [key, value] of Object.entries(err.extensions.validation)) {\n          valErrors.push(value[0]);\n        }\n      } else if (err.extensions.category == \"authentication\") {\n        valErrors.push(err.message);\n      }\n    });\n    setValidationErrors(valErrors);\n  };\n  /* Log In */\n\n\n  const [loginMutation, loginResponse] = useMutation(LOGIN_MUTATION, {\n    onError: errors => errorHandler(errors)\n  });\n\n  const sendLogin = () => {\n    setValidationErrors([]);\n    loginMutation({\n      variables: {\n        email: userInput.email,\n        pass: userInput.password\n      }\n    });\n  };\n  /* End Log In */\n\n  /* Register */\n\n\n  const [registerMutation, registerResponse] = useMutation(REGISTER_MUTATION, {\n    onError: errors => errorHandler(errors)\n  });\n\n  const sendRegister = () => {\n    setValidationErrors([]);\n    registerMutation({\n      variables: {\n        email: userInput.email,\n        pass: userInput.password\n      }\n    });\n  };\n\n  const sendFastRegister = () => {\n    setValidationErrors([]);\n    registerMutation({\n      variables: {\n        email: userInput.email\n      }\n    });\n  };\n  /* End Register */\n\n  /* User Exists */\n\n\n  const [userExists, userExistsResponse] = useLazyQuery(USER_EXISTS_QUERY, {\n    onError: errors => errorHandler(errors),\n    fetchPolicy: \"no-cache\"\n  });\n\n  const sendUserExist = () => {\n    setValidationErrors([]);\n    userExists({\n      variables: {\n        email: userInput.email\n      }\n    });\n  };\n  /* End User Exists */\n\n  /* Social Login */\n\n\n  const [loginSocial, socialResponse] = useMutation(SOCIAL_LOGIN_MUTATION, {\n    onError: errors => errorHandler(errors)\n  });\n\n  const sendSocialLogin = variables => {\n    setValidationErrors([]);\n    loginSocial({\n      variables: _objectSpread({}, variables)\n    });\n  };\n  /* End Social Login */\n\n  /* One Tap Sign In */\n\n\n  const [MUTATOR_ONE_TAP_SIGN_IN, responseOneTapSignIn] = useMutation(GOOGLE_ONE_TAP_MUTATION);\n\n  const sendOneTapSignIn = variables => MUTATOR_ONE_TAP_SIGN_IN({\n    variables: _objectSpread({}, variables)\n  });\n  /* End One Tap Sign In */\n\n  /* Forget Password */\n\n\n  const [forgotPassword, forgotPasswordResponse] = useMutation(FORGOT_PASSWORD_MUTATION, {\n    onError: errors => errorHandler(errors)\n  });\n\n  const sendForgotPassword = () => {\n    setValidationErrors([]);\n    forgotPassword({\n      variables: {\n        email: userInput.email\n      }\n    });\n  };\n  /* End Forget Password */\n\n  /* Log Out */\n\n\n  const [logoutMutation, logoutResponse] = useMutation(LOGOUT_MUTATION);\n  /* End Log Out */\n\n  return {\n    user: {\n      data: data,\n      loading: loading,\n      error: error,\n      refetch\n    },\n    isLoggedIn: !error && data && (data === null || data === void 0 ? void 0 : data.me) != null && data.me.id ? true : false,\n    userInput: {\n      value: userInput,\n      set: setUserInput\n    },\n    login: {\n      send: sendLogin,\n      response: loginResponse\n    },\n    logout: {\n      send: logoutMutation,\n      response: logoutResponse\n    },\n    register: {\n      send: sendRegister,\n      doLater: sendFastRegister,\n      response: registerResponse\n    },\n    userExists: {\n      send: sendUserExist,\n      response: userExistsResponse\n    },\n    socialLogin: {\n      send: sendSocialLogin,\n      response: socialResponse\n    },\n    oneTapSignIn: {\n      send: sendOneTapSignIn,\n      response: responseOneTapSignIn\n    },\n    forgotPassword: {\n      send: sendForgotPassword,\n      response: forgotPasswordResponse\n    },\n    validationErrors: {\n      errors: validationErrors,\n      set: setValidationErrors\n    }\n  };\n};\n\nexport { useUser };","map":{"version":3,"sources":["/home/ansina/jsStuff/infocasas-landings/shared-components/Components/User/User.hook.tsx"],"names":["useState","useMutation","useLazyQuery","CURRENT_USER_QUERY","LOGIN_MUTATION","LOGOUT_MUTATION","REGISTER_MUTATION","USER_EXISTS_QUERY","SOCIAL_LOGIN_MUTATION","FORGOT_PASSWORD_MUTATION","GOOGLE_ONE_TAP_MUTATION","useQuerySkipAuth","useUser","data","loading","error","refetch","userInput","setUserInput","email","password","validationErrors","setValidationErrors","errorHandler","errors","valErrors","graphQLErrors","forEach","err","extensions","category","key","value","Object","entries","validation","push","message","loginMutation","loginResponse","onError","sendLogin","variables","pass","registerMutation","registerResponse","sendRegister","sendFastRegister","userExists","userExistsResponse","fetchPolicy","sendUserExist","loginSocial","socialResponse","sendSocialLogin","MUTATOR_ONE_TAP_SIGN_IN","responseOneTapSignIn","sendOneTapSignIn","forgotPassword","forgotPasswordResponse","sendForgotPassword","logoutMutation","logoutResponse","user","isLoggedIn","me","id","set","login","send","response","logout","register","doLater","socialLogin","oneTapSignIn"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { ApolloError, useMutation, useLazyQuery } from \"@apollo/client\";\nimport {\n\tCURRENT_USER_QUERY,\n\tLOGIN_MUTATION,\n\tLOGOUT_MUTATION,\n\tREGISTER_MUTATION,\n\tUSER_EXISTS_QUERY,\n\tSOCIAL_LOGIN_MUTATION,\n\tFORGOT_PASSWORD_MUTATION,\n\tGOOGLE_ONE_TAP_MUTATION,\n} from \"./User.querys\";\nimport { useQuerySkipAuth } from \"../../GlobalHooks/useQuerySkipAuth\";\n\ntype UserInput = { email: string; password: string };\n\ninterface UserHookInterface {\n\tuser: {\n\t\tdata: any;\n\t\tloading: boolean;\n\t\terror: ApolloError | undefined;\n\t\trefetch: Function;\n\t};\n\tisLoggedIn: boolean;\n\tuserInput: {\n\t\tvalue: UserInput;\n\t\tset: ({ email, password }: UserInput) => void;\n\t};\n\tlogin: { send: () => void; response: any };\n\tlogout: { send: () => Promise<any>; response: any };\n\tregister: { send: () => void; doLater: () => void; response: any };\n\tuserExists: { send: () => void; response: any };\n\tforgotPassword: { send: () => void; response: any };\n\tsocialLogin: { send: (x: any) => void; response: any };\n\toneTapSignIn: { send: (x: any) => void; response: any };\n\tvalidationErrors: { errors: string[]; set: (x: string[]) => void };\n}\n\nconst useUser = (): UserHookInterface => {\n\tconst { data, loading, error, refetch } = useQuerySkipAuth(CURRENT_USER_QUERY);\n\tconst [userInput, setUserInput] = useState({ email: \"\", password: \"\" });\n\tconst [validationErrors, setValidationErrors] = useState<string[]>([]);\n\n\tconst errorHandler = (errors: ApolloError) => {\n\t\tlet valErrors: string[] = [];\n\t\terrors.graphQLErrors.forEach(err => {\n\t\t\tif (err.extensions.category == \"validation\") {\n\t\t\t\tfor (const [key, value] of Object.entries(err.extensions.validation)) {\n\t\t\t\t\tvalErrors.push(value[0]);\n\t\t\t\t}\n\t\t\t} else if (err.extensions.category == \"authentication\") {\n\t\t\t\tvalErrors.push(err.message);\n\t\t\t}\n\t\t});\n\t\tsetValidationErrors(valErrors);\n\t};\n\n\t/* Log In */\n\tconst [loginMutation, loginResponse] = useMutation(LOGIN_MUTATION, {\n\t\tonError: (errors: ApolloError) => errorHandler(errors),\n\t});\n\tconst sendLogin = () => {\n\t\tsetValidationErrors([]);\n\t\tloginMutation({\n\t\t\tvariables: {\n\t\t\t\temail: userInput.email,\n\t\t\t\tpass: userInput.password,\n\t\t\t},\n\t\t});\n\t};\n\t/* End Log In */\n\n\t/* Register */\n\tconst [registerMutation, registerResponse] = useMutation(REGISTER_MUTATION, {\n\t\tonError: (errors: ApolloError) => errorHandler(errors),\n\t});\n\tconst sendRegister = () => {\n\t\tsetValidationErrors([]);\n\t\tregisterMutation({\n\t\t\tvariables: {\n\t\t\t\temail: userInput.email,\n\t\t\t\tpass: userInput.password,\n\t\t\t},\n\t\t});\n\t};\n\tconst sendFastRegister = () => {\n\t\tsetValidationErrors([]);\n\t\tregisterMutation({\n\t\t\tvariables: { email: userInput.email },\n\t\t});\n\t};\n\t/* End Register */\n\n\t/* User Exists */\n\tconst [userExists, userExistsResponse] = useLazyQuery(USER_EXISTS_QUERY, {\n\t\tonError: (errors: ApolloError) => errorHandler(errors),\n\t\tfetchPolicy: \"no-cache\",\n\t});\n\tconst sendUserExist = () => {\n\t\tsetValidationErrors([]);\n\t\tuserExists({ variables: { email: userInput.email } });\n\t};\n\t/* End User Exists */\n\n\t/* Social Login */\n\tconst [loginSocial, socialResponse] = useMutation(SOCIAL_LOGIN_MUTATION, {\n\t\tonError: (errors: ApolloError) => errorHandler(errors),\n\t});\n\tconst sendSocialLogin = variables => {\n\t\tsetValidationErrors([]);\n\t\tloginSocial({ variables: { ...variables } });\n\t};\n\t/* End Social Login */\n\n\t/* One Tap Sign In */\n\tconst [MUTATOR_ONE_TAP_SIGN_IN, responseOneTapSignIn] = useMutation(GOOGLE_ONE_TAP_MUTATION);\n\tconst sendOneTapSignIn = variables => MUTATOR_ONE_TAP_SIGN_IN({ variables: { ...variables } });\n\t/* End One Tap Sign In */\n\n\t/* Forget Password */\n\tconst [forgotPassword, forgotPasswordResponse] = useMutation(FORGOT_PASSWORD_MUTATION, {\n\t\tonError: (errors: ApolloError) => errorHandler(errors),\n\t});\n\tconst sendForgotPassword = () => {\n\t\tsetValidationErrors([]);\n\t\tforgotPassword({ variables: { email: userInput.email } });\n\t};\n\t/* End Forget Password */\n\n\t/* Log Out */\n\tconst [logoutMutation, logoutResponse] = useMutation(LOGOUT_MUTATION);\n\t/* End Log Out */\n\n\treturn {\n\t\tuser: { data: data, loading: loading, error: error, refetch },\n\t\tisLoggedIn: !error && data && data?.me != null && data.me.id ? true : false,\n\t\tuserInput: {\n\t\t\tvalue: userInput,\n\t\t\tset: setUserInput,\n\t\t},\n\t\tlogin: {\n\t\t\tsend: sendLogin,\n\t\t\tresponse: loginResponse,\n\t\t},\n\t\tlogout: { send: logoutMutation, response: logoutResponse },\n\t\tregister: {\n\t\t\tsend: sendRegister,\n\t\t\tdoLater: sendFastRegister,\n\t\t\tresponse: registerResponse,\n\t\t},\n\t\tuserExists: {\n\t\t\tsend: sendUserExist,\n\t\t\tresponse: userExistsResponse,\n\t\t},\n\t\tsocialLogin: {\n\t\t\tsend: sendSocialLogin,\n\t\t\tresponse: socialResponse,\n\t\t},\n\t\toneTapSignIn: {\n\t\t\tsend: sendOneTapSignIn,\n\t\t\tresponse: responseOneTapSignIn,\n\t\t},\n\t\tforgotPassword: {\n\t\t\tsend: sendForgotPassword,\n\t\t\tresponse: forgotPasswordResponse,\n\t\t},\n\t\tvalidationErrors: {\n\t\t\terrors: validationErrors,\n\t\t\tset: setValidationErrors,\n\t\t},\n\t};\n};\n\nexport { useUser };\n"]},"metadata":{},"sourceType":"module"}