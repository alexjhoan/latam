{"ast":null,"code":"import { FragmentDefiner, useReadFragment } from \"../../../../GlobalHooks/useReadFragment\";\nimport { useFilters } from \"../../Filters.hook\";\nconst FRAGMENT_SEASONS_OPTIONS = new FragmentDefiner(\"Filter\", `\n\t\tid\n\t\tname\n\t\toptions\n`);\nexport const FRAGMENT_SEASONS = new FragmentDefiner(\"Filters\", `\n\t\tseasons {\n\t\t\t${FRAGMENT_SEASONS_OPTIONS.query()}\n\t\t}\n`);\nexport const useSeasons = () => {\n  const {\n    loading,\n    data: {\n      options\n    },\n    error\n  } = useReadFragment(FRAGMENT_SEASONS_OPTIONS, \"seasons\");\n  const {\n    filters\n  } = useFilters();\n  return {\n    initialValue: filters.season,\n    options: {\n      loading,\n      options\n    }\n  };\n};","map":{"version":3,"sources":["/home/ansina/jsStuff/infocasas-landings/shared-components/Components/Filters/TemporalFilter/Seasons/Seasons.hook.tsx"],"names":["FragmentDefiner","useReadFragment","useFilters","FRAGMENT_SEASONS_OPTIONS","FRAGMENT_SEASONS","query","useSeasons","loading","data","options","error","filters","initialValue","season"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,eAA1B,QAAiD,yCAAjD;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,MAAMC,wBAAwB,GAAG,IAAIH,eAAJ,CAChC,QADgC,EAE/B;;;;CAF+B,CAAjC;AASA,OAAO,MAAMI,gBAAgB,GAAG,IAAIJ,eAAJ,CAC/B,SAD+B,EAE9B;;KAEGG,wBAAwB,CAACE,KAAzB,EAAiC;;CAJN,CAAzB;AAaP,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC/B,QAAM;AACLC,IAAAA,OADK;AAELC,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF,KAFD;AAGLC,IAAAA;AAHK,MAIFT,eAAe,CAACE,wBAAD,EAA2B,SAA3B,CAJnB;AAMA,QAAM;AAAEQ,IAAAA;AAAF,MAAcT,UAAU,EAA9B;AAEA,SAAO;AACNU,IAAAA,YAAY,EAAED,OAAO,CAACE,MADhB;AAENJ,IAAAA,OAAO,EAAE;AAAEF,MAAAA,OAAF;AAAWE,MAAAA;AAAX;AAFH,GAAP;AAIA,CAbM","sourcesContent":["import { FragmentDefiner, useReadFragment } from \"../../../../GlobalHooks/useReadFragment\";\nimport { useFilters } from \"../../Filters.hook\";\n\nconst FRAGMENT_SEASONS_OPTIONS = new FragmentDefiner(\n\t\"Filter\",\n\t`\n\t\tid\n\t\tname\n\t\toptions\n`\n);\n\nexport const FRAGMENT_SEASONS = new FragmentDefiner(\n\t\"Filters\",\n\t`\n\t\tseasons {\n\t\t\t${FRAGMENT_SEASONS_OPTIONS.query()}\n\t\t}\n`\n);\n\nexport interface SeasonFilterProps {\n\tfilterChanged: ({}: any) => void;\n}\n\nexport const useSeasons = () => {\n\tconst {\n\t\tloading,\n\t\tdata: { options },\n\t\terror,\n\t} = useReadFragment(FRAGMENT_SEASONS_OPTIONS, \"seasons\");\n\n\tconst { filters } = useFilters();\n\n\treturn {\n\t\tinitialValue: filters.season,\n\t\toptions: { loading, options },\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}