{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/ansina/jsStuff/infocasas-landings/shared-components/Contexts/Theme/context.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext } from 'react';\nimport InfoCasasTheme from '../../Styles/JSthemes/InfoCasasTheme';\nvar ThemeContext = createContext(null);\n\nvar ThemeProvider = function ThemeProvider(_ref) {\n  var children = _ref.children,\n      _ref$initialState = _ref.initialState,\n      initialState = _ref$initialState === void 0 ? InfoCasasTheme : _ref$initialState,\n      active = _ref.active;\n\n  // @TODO evaluate when to initialize with other theme\n  if (!active) {\n    return __jsx(React.Fragment, null, children);\n  }\n\n  return __jsx(ThemeContext.Provider, {\n    value: initialState,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 3\n    }\n  }, children);\n};\n\n_c = ThemeProvider;\nexport { ThemeContext, ThemeProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"sources":["/home/ansina/jsStuff/infocasas-landings/shared-components/Contexts/Theme/context.tsx"],"names":["createContext","InfoCasasTheme","ThemeContext","ThemeProvider","children","initialState","active"],"mappings":";;;;;AAAA,SAASA,aAAT,QAAyC,OAAzC;AAEA,OAAOC,cAAP,MAA2B,sCAA3B;AAEA,IAAMC,YAAY,GAAGF,aAAa,CAAC,IAAD,CAAlC;;AAEA,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,OAQhB;AAAA,MAPLC,QAOK,QAPLA,QAOK;AAAA,+BANLC,YAMK;AAAA,MANLA,YAMK,kCANUJ,cAMV;AAAA,MALLK,MAKK,QALLA,MAKK;;AACL;AAEA,MAAI,CAACA,MAAL,EAAa;AACZ,WAAO,4BAAGF,QAAH,CAAP;AACA;;AAED,SACC,MAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEC,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACED,QADF,CADD;AAKA,CApBD;;KAAMD,a;AAsBN,SAASD,YAAT,EAAuBC,aAAvB","sourcesContent":["import { createContext, ReactNode } from 'react';\nimport { ThemeModel } from './model';\nimport InfoCasasTheme from '../../Styles/JSthemes/InfoCasasTheme';\n\nconst ThemeContext = createContext(null);\n\nconst ThemeProvider = ({\n\tchildren,\n\tinitialState = InfoCasasTheme,\n\tactive,\n}: {\n\tchildren: ReactNode;\n\tinitialState?: ThemeModel;\n\tactive: boolean;\n}) => {\n\t// @TODO evaluate when to initialize with other theme\n\n\tif (!active) {\n\t\treturn <>{children}</>;\n\t}\n\n\treturn (\n\t\t<ThemeContext.Provider value={initialState}>\n\t\t\t{children}\n\t\t</ThemeContext.Provider>\n\t);\n};\n\nexport { ThemeContext, ThemeProvider };\n"]},"metadata":{},"sourceType":"module"}