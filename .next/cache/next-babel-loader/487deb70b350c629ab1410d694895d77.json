{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/ansina/jsStuff/infocasas-landings/lib/apollo3.tsx\",\n    _this4 = this;\n\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\tquery InitialConfig {\\n\\t\\tconfiguration {\\n\\t\\t\\tcountry_id\\n\\t\\t\\tcountry_name\\n\\t\\t\\tcountry_capital\\n\\t\\t\\tcountry_capital_id\\n\\t\\t\\tcountry_code\\n\\t\\t\\tsite_name\\n\\t\\t\\tlogo\\n\\t\\t\\tinformation_email\\n\\t\\t\\tsales_email\\n\\t\\t\\tcurrency {\\n\\t\\t\\t\\tid\\n\\t\\t\\t\\tname\\n\\t\\t\\t}\\n\\t\\t\\ttimezone\\n\\t\\t\\tIVA\\n\\t\\t\\tanalytics_id\\n\\t\\t\\tgoogle_tag_manager_id\\n\\t\\t\\trtb_id\\n\\t\\t\\tonesignal_configuration {\\n\\t\\t\\t\\tapp_id\\n\\t\\t\\t}\\n\\t\\t\\tfacebook_configuration {\\n\\t\\t\\t\\tpixel_id\\n\\t\\t\\t}\\n\\t\\t\\tpinterest_id\\n\\t\\t\\tinstagram_client_id\\n\\t\\t\\theader_configuration {\\n\\t\\t\\t\\tbuttons {\\n\\t\\t\\t\\t\\ttext\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tsocialMediaLinks {\\n\\t\\t\\t\\tslug\\n\\t\\t\\t\\tname\\n\\t\\t\\t\\turl\\n\\t\\t\\t\\ticon\\n\\t\\t\\t}\\n\\t\\t\\theader_links {\\n\\t\\t\\t\\tid\\n\\t\\t\\t\\ttitle\\n\\t\\t\\t\\tlink\\n\\t\\t\\t\\tbanner_params\\n\\t\\t\\t\\tlinks {\\n\\t\\t\\t\\t\\theader_link_id\\n\\t\\t\\t\\t\\ttitle\\n\\t\\t\\t\\t\\tlink\\n\\t\\t\\t\\t\\tlinks {\\n\\t\\t\\t\\t\\t\\ttitle\\n\\t\\t\\t\\t\\t\\tlink\\n\\t\\t\\t\\t\\t\\tcategory\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport Head from \"next/head\";\nimport Cookies from \"universal-cookie\";\nimport fetch from \"isomorphic-unfetch\";\nimport { message } from \"antd\";\nimport { OfflineToastLoader } from \"../shared-components/Components/NoConectionToast/web\";\nimport Console from \"./console\";\nimport * as Sentry from \"@sentry/browser\";\nimport { ApolloClient, ApolloLink, ApolloProvider, concat, fromPromise, InMemoryCache, gql } from \"@apollo/client\";\nimport { getDataFromTree } from \"@apollo/client/react/ssr\";\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { openAuthModal } from \"../shared-components/Components/User/AuthModal/web\";\nvar apolloClient = null;\nvar CONFIG_QUERY = gql(_templateObject());\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent) {\n  var _this = this;\n\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr,\n      _ref$domain = _ref.domain,\n      domain = _ref$domain === void 0 ? null : _ref$domain;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    if (domain == null && true) {\n      domain = window.location.host;\n    }\n\n    var token = true ? new Cookies(document.cookie).get(\"frontend_token\") : null;\n    var client = apolloClient || initApolloClient(apolloState, token, domain);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 4\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 5\n      }\n    })));\n  };\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n        var _ctx$req, _configQuery$data$con, _configQuery, _configQuery$data, _configQuery$data$con2, _configQuery2, _configQuery2$data, _configQuery2$data$co;\n\n        var AppTree, cookie, apolloClient, configQuery, pageProps, apolloState;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                AppTree = ctx.AppTree;\n                cookie = new Cookies(false ? ctx.req.headers.cookie : document.cookie);\n\n                if (domain == null) {\n                  domain = false ? ctx.req.headers.host : window.location.host;\n                }\n\n                apolloClient = ctx.apolloClient = initApolloClient(typeof ((_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : _ctx$req.session) !== \"undefined\" ? ctx.req.session.persisted_cache : {}, cookie.get(\"frontend_token\"), domain);\n                configQuery = null;\n                _context.prev = 5;\n                _context.next = 8;\n                return apolloClient.query({\n                  query: CONFIG_QUERY\n                });\n\n              case 8:\n                configQuery = _context.sent;\n                _context.next = 16;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](5);\n                console.log(\"--------------------------------------------------\");\n                console.log(\"Initial Config querry error: \", _context.t0.graphQLErrors);\n                console.log(\"--------------------------------------------------\");\n\n              case 16:\n                // Run wrapped getInitialProps methods\n                pageProps = {};\n\n                if (!PageComponent.getInitialProps) {\n                  _context.next = 21;\n                  break;\n                }\n\n                _context.next = 20;\n                return PageComponent.getInitialProps(ctx);\n\n              case 20:\n                pageProps = _context.sent;\n\n              case 21:\n                if (!false) {\n                  _context.next = 40;\n                  break;\n                }\n\n                if (!(ctx.res && ctx.res.finished)) {\n                  _context.next = 24;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", pageProps);\n\n              case 24:\n                if (!ssr) {\n                  _context.next = 40;\n                  break;\n                }\n\n                _context.prev = 25;\n                _context.next = 28;\n                return getDataFromTree(__jsx(AppTree, {\n                  pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                    apolloClient: apolloClient\n                  }),\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 157,\n                    columnNumber: 8\n                  }\n                }));\n\n              case 28:\n                _context.next = 39;\n                break;\n\n              case 30:\n                _context.prev = 30;\n                _context.t1 = _context[\"catch\"](25);\n                // Prevent Apollo Client GraphQL errors from crashing SSR.\n                // Handle them in components via the data.error prop:\n                // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                Console.log(\"---------------------\");\n                Console.error(\"Error while running `getDataFromTree`\");\n                Console.log(\"\\x1b[36m\");\n                Console.log(_context.t1);\n                Console.log(\"\\x1b[0m\");\n                Console.log(_context.t1.extensions);\n                Console.log(\"--------------------\");\n\n              case 39:\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n\n              case 40:\n                // Extract query data from the Apollo store\n                apolloState = apolloClient.cache.extract();\n                return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, pageProps), {}, {\n                  apolloState: apolloState,\n                  ConfigContextInitialState: (_configQuery$data$con = (_configQuery = configQuery) === null || _configQuery === void 0 ? void 0 : (_configQuery$data = _configQuery.data) === null || _configQuery$data === void 0 ? void 0 : _configQuery$data.configuration) !== null && _configQuery$data$con !== void 0 ? _configQuery$data$con : null,\n                  country_id: (_configQuery$data$con2 = (_configQuery2 = configQuery) === null || _configQuery2 === void 0 ? void 0 : (_configQuery2$data = _configQuery2.data) === null || _configQuery2$data === void 0 ? void 0 : (_configQuery2$data$co = _configQuery2$data.configuration) === null || _configQuery2$data$co === void 0 ? void 0 : _configQuery2$data$co.country_id) !== null && _configQuery$data$con2 !== void 0 ? _configQuery$data$con2 : null\n                }));\n\n              case 42:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[5, 11], [25, 30]]);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var token = arguments.length > 1 ? arguments[1] : undefined;\n  var domain = arguments.length > 2 ? arguments[2] : undefined;\n\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState, token, domain);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    // via https://github.com/apollographql/apollo-client/issues/5089\n    //apolloClient = createApolloClient(initialState);\n    apolloClient = createApolloClient(initialState, token, domain);\n  }\n\n  return apolloClient;\n}\n\nvar ForceErrorLink = /*#__PURE__*/function (_ApolloLink) {\n  _inherits(ForceErrorLink, _ApolloLink);\n\n  var _super = _createSuper(ForceErrorLink);\n\n  function ForceErrorLink(error) {\n    var _this2;\n\n    _classCallCheck(this, ForceErrorLink);\n\n    _this2 = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this2), \"error\", null);\n\n    _this2.error = error;\n    return _this2;\n  }\n\n  _createClass(ForceErrorLink, [{\n    key: \"request\",\n    value: function request(operation, forward) {\n      var _this3 = this;\n\n      return new Observable(function (observer) {\n        observer.error(_this3.error);\n      });\n    }\n  }]);\n\n  return ForceErrorLink;\n}(ApolloLink);\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var token = arguments.length > 1 ? arguments[1] : undefined;\n  var domain = arguments.length > 2 ? arguments[2] : undefined;\n\n  var miMiddleware = function miMiddleware(xxx) {\n    return new ApolloLink(function (operation, forward) {\n      var anulable = false;\n\n      if (operation.query && operation.query.definitions && operation.query.definitions.length > 0) {\n        operation.query.definitions.map(function (o) {\n          if (o.name && o.name.value) {\n            Console.warn(\"Apollo is running query:  \\x1b[36m\" + o.name.value + \"\\x1b[0m\");\n          }\n        });\n      } else {\n        Console.warn(\"Apollo is running query \\x1b[36m\" + \"without name\" + \"\\x1b[0m\");\n      }\n\n      if (anulable) {\n        var _link = new ForceErrorLink({\n          errors: [{\n            message: \"Local Unauthorized\"\n          }]\n        });\n\n        return _link.request(operation, null);\n      }\n\n      var auth = true ? new Cookies(document.cookie).get(\"frontend_token\") : token;\n      operation.setContext({\n        headers: {\n          authorization: auth ? \"Bearer \".concat(auth) : \"\",\n          \"x-origin\": domain\n        }\n      });\n      return forward(operation);\n    });\n  };\n\n  var cache = new InMemoryCache().restore(initialState);\n  var httpLink = new BatchHttpLink({\n    uri: process.env.graphQL_uri,\n    // Server URL (must be absolute)\n    credentials: \"same-origin\",\n    // Additional fetch() options like `credentials` or `headers`\n    fetch: fetch\n  });\n  var authLink = setContext(function (_, _ref4) {\n    var headers = _ref4.headers;\n    // get the authentication token from local storage if it exists\n    var _token = \"gika\";\n    var _domain = \"localhost:3000\";\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: _token ? \"Bearer \".concat(_token) : \"\",\n        \"x-origin\": _domain\n      })\n    };\n  });\n  var links = [errorLink, authLink, httpLink];\n  var link = ApolloLink.from(links);\n  return new ApolloClient({\n    ssrMode: false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: concat(errorLink, concat(miMiddleware(\"GOOD\"), new BatchHttpLink({\n      uri: process.env.graphQL_uri,\n      // Server URL (must be absolute)\n      credentials: \"same-origin\",\n      // Additional fetch() options like `credentials` or `headers`\n      fetch: fetch\n    }))),\n    cache: cache,\n    defaultOptions: {\n      watchQuery: {\n        fetchPolicy: \"cache-first\"\n      },\n      query: {\n        fetchPolicy: \"cache-first\"\n      }\n    }\n  });\n}\n\nexport function handleApolloError(error) {\n  console.error(JSON.stringify(error)); //debug even more info\n\n  var abort = true; //use this to filter some benign errors\n  // filtro Network Errors por aquellos que se dan al perder la conexion a internet\n  // al filtrar por \"Network Error: failed to fetch\" safari no devolvia ese mensaje de error entonces no filtraba bien en esos casos, ademas el mensaje dependia del lenguaje del dispositivo por lo que eran multiples mensajes a filtrar y podia ser que aparecieran otros mensajes diferentes.\n  // filtrando los Network Errors tambien filtraba algunos errores importantes como Network Error: ServerError statusCode 500\n  // por eso tambien se agrego a la condincion que no estuviera online !navigator.onLine\n\n  if (error && error.message && error.message.match(/Network error/) && typeof navigator != \"undefined\" && !navigator.onLine) {\n    message.open({\n      key: \"noConnection\",\n      content: __jsx(OfflineToastLoader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }\n      }),\n      icon: null,\n      type: null,\n      duration: 3\n    });\n  } else {\n    Sentry.captureException(error);\n  }\n\n  return abort;\n}\nvar isRefreshing = false;\nvar pendingRequests = [];\n\nvar resolvePendingRequests = function resolvePendingRequests() {\n  console.log(\"resolve pending requests\", pendingRequests);\n  pendingRequests.map(function (callback) {\n    return callback();\n  });\n  pendingRequests = [];\n};\n\nvar errorLink = onError(function (_ref5) {\n  var graphQLErrors = _ref5.graphQLErrors,\n      networkError = _ref5.networkError,\n      operation = _ref5.operation,\n      forward = _ref5.forward,\n      location = _ref5.location,\n      other = _objectWithoutProperties(_ref5, [\"graphQLErrors\", \"networkError\", \"operation\", \"forward\", \"location\"]);\n\n  console.log(\"On error\");\n  console.log(graphQLErrors, networkError, other);\n  Console.log(\"Query con error: \\x1b[36m\" + operation.operationName + \"\\x1b[0m\");\n\n  if (false) {\n    return;\n  }\n\n  if (graphQLErrors && graphQLErrors.filter(function (e) {\n    return e;\n  }).length > 0) {\n    var _iterator = _createForOfIteratorHelper(graphQLErrors),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var err = _step.value;\n\n        if (err.debugMessage && err.debugMessage.includes(\"Unauthenticated\")) {\n          var forward$ = void 0;\n\n          if (!isRefreshing) {\n            isRefreshing = true;\n            forward$ = fromPromise(openAuthModal({\n              withPromise: true\n            }).then(function (o) {\n              console.log(\"LOGIN ACEPTADO: \", o);\n\n              if (true) {\n                //@todo-login\n                console.log(\"COOKIE SETIADA\");\n                resolvePendingRequests();\n              } else {\n                console.log(\"ALGO SALIO MAL, NO HAY COOKIE\");\n              }\n\n              return true;\n            })[\"catch\"](function (error) {\n              console.log(\"LOGIN RECHAZADO: \", error);\n              pendingRequests = [];\n              return;\n            })[\"finally\"](function () {\n              isRefreshing = false;\n            })).filter(function (value) {\n              return Boolean(value);\n            });\n          } else {\n            // Will only emit once the Promise is resolved\n            forward$ = fromPromise(new Promise(function (resolve) {\n              pendingRequests.push(function () {\n                return resolve();\n              });\n            }));\n          }\n\n          return forward$.flatMap(function () {\n            console.log(\"Forwarding!\");\n            console.log(operation);\n            return forward(operation);\n          });\n        } else {\n          Sentry.captureException(err);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  if (networkError) {\n    console.log(\"Network error: \", networkError);\n    message.open({\n      key: \"noConnection\",\n      content: __jsx(OfflineToastLoader, {\n        __self: _this4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 14\n        }\n      }),\n      icon: null,\n      type: null,\n      duration: 3\n    });\n  }\n});","map":{"version":3,"sources":["/home/ansina/jsStuff/infocasas-landings/lib/apollo3.tsx"],"names":["React","Head","Cookies","fetch","message","OfflineToastLoader","Console","Sentry","ApolloClient","ApolloLink","ApolloProvider","concat","fromPromise","InMemoryCache","gql","getDataFromTree","BatchHttpLink","onError","setContext","openAuthModal","apolloClient","CONFIG_QUERY","withApollo","PageComponent","ssr","domain","WithApollo","apolloState","pageProps","window","location","host","token","document","cookie","get","client","initApolloClient","getInitialProps","ctx","AppTree","req","headers","session","persisted_cache","configQuery","query","console","log","graphQLErrors","res","finished","error","extensions","rewind","cache","extract","ConfigContextInitialState","data","configuration","country_id","initialState","createApolloClient","ForceErrorLink","operation","forward","Observable","observer","miMiddleware","xxx","anulable","definitions","length","map","o","name","value","warn","link","errors","request","auth","authorization","restore","httpLink","uri","process","env","graphQL_uri","credentials","authLink","_","_token","_domain","links","errorLink","from","ssrMode","defaultOptions","watchQuery","fetchPolicy","handleApolloError","JSON","stringify","abort","match","navigator","onLine","open","key","content","icon","type","duration","captureException","isRefreshing","pendingRequests","resolvePendingRequests","callback","networkError","other","operationName","filter","e","err","debugMessage","includes","forward$","withPromise","then","Boolean","Promise","resolve","push","flatMap"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport Cookies from \"universal-cookie\";\nimport fetch from \"isomorphic-unfetch\";\nimport { message } from \"antd\";\nimport { OfflineToastLoader } from \"../shared-components/Components/NoConectionToast/web\";\nimport Console from \"./console\";\nimport * as Sentry from \"@sentry/browser\";\nimport {\n\tApolloClient,\n\tApolloLink,\n\tApolloProvider,\n\tconcat,\n\tfromPromise,\n\tInMemoryCache,\n\tgql,\n\tApolloQueryResult,\n} from \"@apollo/client\";\nimport { getDataFromTree } from \"@apollo/client/react/ssr\";\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { openAuthModal } from \"../shared-components/Components/User/AuthModal/web\";\nlet apolloClient = null;\n\nconst CONFIG_QUERY = gql`\n\tquery InitialConfig {\n\t\tconfiguration {\n\t\t\tcountry_id\n\t\t\tcountry_name\n\t\t\tcountry_capital\n\t\t\tcountry_capital_id\n\t\t\tcountry_code\n\t\t\tsite_name\n\t\t\tlogo\n\t\t\tinformation_email\n\t\t\tsales_email\n\t\t\tcurrency {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t}\n\t\t\ttimezone\n\t\t\tIVA\n\t\t\tanalytics_id\n\t\t\tgoogle_tag_manager_id\n\t\t\trtb_id\n\t\t\tonesignal_configuration {\n\t\t\t\tapp_id\n\t\t\t}\n\t\t\tfacebook_configuration {\n\t\t\t\tpixel_id\n\t\t\t}\n\t\t\tpinterest_id\n\t\t\tinstagram_client_id\n\t\t\theader_configuration {\n\t\t\t\tbuttons {\n\t\t\t\t\ttext\n\t\t\t\t}\n\t\t\t}\n\t\t\tsocialMediaLinks {\n\t\t\t\tslug\n\t\t\t\tname\n\t\t\t\turl\n\t\t\t\ticon\n\t\t\t}\n\t\t\theader_links {\n\t\t\t\tid\n\t\t\t\ttitle\n\t\t\t\tlink\n\t\t\t\tbanner_params\n\t\t\t\tlinks {\n\t\t\t\t\theader_link_id\n\t\t\t\t\ttitle\n\t\t\t\t\tlink\n\t\t\t\t\tlinks {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\tlink\n\t\t\t\t\t\tcategory\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true, domain = null } = {}) {\n\tconst WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n\t\tif (domain == null && typeof window !== \"undefined\") {\n\t\t\tdomain = window.location.host;\n\t\t}\n\n\t\tconst token =\n\t\t\ttypeof window !== \"undefined\"\n\t\t\t\t? new Cookies(document.cookie).get(\"frontend_token\")\n\t\t\t\t: null;\n\t\tconst client = apolloClient || initApolloClient(apolloState, token, domain);\n\t\treturn (\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t<PageComponent {...pageProps} />\n\t\t\t</ApolloProvider>\n\t\t);\n\t};\n\n\tif (ssr || PageComponent.getInitialProps) {\n\t\tWithApollo.getInitialProps = async ctx => {\n\t\t\tconst { AppTree } = ctx;\n\t\t\tconst cookie = new Cookies(\n\t\t\t\ttypeof window === \"undefined\" ? ctx.req.headers.cookie : document.cookie\n\t\t\t);\n\t\t\tif (domain == null) {\n\t\t\t\tdomain =\n\t\t\t\t\ttypeof window === \"undefined\" ? ctx.req.headers.host : window.location.host;\n\t\t\t}\n\n\t\t\tconst apolloClient = (ctx.apolloClient = initApolloClient(\n\t\t\t\ttypeof ctx.req?.session !== \"undefined\" ? ctx.req.session.persisted_cache : {},\n\t\t\t\tcookie.get(\"frontend_token\"),\n\t\t\t\tdomain\n\t\t\t));\n\n\t\t\tlet configQuery = null;\n\t\t\ttry {\n\t\t\t\tconfigQuery = await apolloClient.query({ query: CONFIG_QUERY });\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(\"--------------------------------------------------\");\n\t\t\t\tconsole.log(\"Initial Config querry error: \", error.graphQLErrors);\n\t\t\t\tconsole.log(\"--------------------------------------------------\");\n\t\t\t}\n\n\t\t\t// Run wrapped getInitialProps methods\n\t\t\tlet pageProps = {};\n\t\t\tif (PageComponent.getInitialProps) {\n\t\t\t\tpageProps = await PageComponent.getInitialProps(ctx);\n\t\t\t}\n\n\t\t\t// Only on the server:\n\t\t\tif (typeof window === \"undefined\") {\n\t\t\t\t// When redirecting, the response is finished.\n\t\t\t\t// No point in continuing to render\n\t\t\t\tif (ctx.res && ctx.res.finished) {\n\t\t\t\t\treturn pageProps;\n\t\t\t\t}\n\n\t\t\t\t// Only if ssr is enabled\n\t\t\t\tif (ssr) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Run all GraphQL queries\n\t\t\t\t\t\tawait getDataFromTree(\n\t\t\t\t\t\t\t<AppTree\n\t\t\t\t\t\t\t\tpageProps={{\n\t\t\t\t\t\t\t\t\t...pageProps,\n\t\t\t\t\t\t\t\t\tapolloClient,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t// Prevent Apollo Client GraphQL errors from crashing SSR.\n\t\t\t\t\t\t// Handle them in components via the data.error prop:\n\t\t\t\t\t\t// https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n\t\t\t\t\t\tConsole.log(\"---------------------\");\n\t\t\t\t\t\tConsole.error(\"Error while running `getDataFromTree`\");\n\t\t\t\t\t\tConsole.log(\"\\x1b[36m\");\n\t\t\t\t\t\tConsole.log(error);\n\t\t\t\t\t\tConsole.log(\"\\x1b[0m\");\n\t\t\t\t\t\tConsole.log(error.extensions);\n\t\t\t\t\t\tConsole.log(\"--------------------\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// getDataFromTree does not call componentWillUnmount\n\t\t\t\t\t// head side effect therefore need to be cleared manually\n\t\t\t\t\tHead.rewind();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Extract query data from the Apollo store\n\t\t\tconst apolloState = apolloClient.cache.extract();\n\n\t\t\treturn {\n\t\t\t\t...pageProps,\n\t\t\t\tapolloState,\n\t\t\t\tConfigContextInitialState: configQuery?.data?.configuration ?? null,\n\t\t\t\tcountry_id: configQuery?.data?.configuration?.country_id ?? null,\n\t\t\t};\n\t\t};\n\t}\n\n\treturn WithApollo;\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState = {}, token, domain) {\n\t// Make sure to create a new client for every server-side request so that data\n\t// isn't shared between connections (which would be bad)\n\n\tif (typeof window === \"undefined\") {\n\t\treturn createApolloClient(initialState, token, domain);\n\t}\n\n\t// Reuse client on the client-side\n\tif (!apolloClient) {\n\t\t// via https://github.com/apollographql/apollo-client/issues/5089\n\t\t//apolloClient = createApolloClient(initialState);\n\t\tapolloClient = createApolloClient(initialState, token, domain);\n\t}\n\n\treturn apolloClient;\n}\n\nclass ForceErrorLink extends ApolloLink {\n\tpublic error = null;\n\tconstructor(error) {\n\t\tsuper();\n\t\tthis.error = error;\n\t}\n\trequest(operation, forward) {\n\t\treturn new Observable(observer => {\n\t\t\tobserver.error(this.error);\n\t\t});\n\t}\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}, token, domain) {\n\tconst miMiddleware = xxx =>\n\t\tnew ApolloLink((operation, forward) => {\n\t\t\tlet anulable = false;\n\n\t\t\tif (\n\t\t\t\toperation.query &&\n\t\t\t\toperation.query.definitions &&\n\t\t\t\toperation.query.definitions.length > 0\n\t\t\t) {\n\t\t\t\toperation.query.definitions.map(o => {\n\t\t\t\t\tif (o.name && o.name.value) {\n\t\t\t\t\t\tConsole.warn(\n\t\t\t\t\t\t\t\"Apollo is running query:  \\x1b[36m\" + o.name.value + \"\\x1b[0m\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tConsole.warn(\"Apollo is running query \\x1b[36m\" + \"without name\" + \"\\x1b[0m\");\n\t\t\t}\n\n\t\t\tif (anulable) {\n\t\t\t\tconst link = new ForceErrorLink({\n\t\t\t\t\terrors: [{ message: \"Local Unauthorized\" }],\n\t\t\t\t});\n\t\t\t\treturn link.request(operation, null);\n\t\t\t}\n\n\t\t\tconst auth =\n\t\t\t\ttypeof window !== \"undefined\"\n\t\t\t\t\t? new Cookies(document.cookie).get(\"frontend_token\")\n\t\t\t\t\t: token;\n\n\t\t\toperation.setContext({\n\t\t\t\theaders: {\n\t\t\t\t\tauthorization: auth ? `Bearer ${auth}` : \"\",\n\t\t\t\t\t\"x-origin\": domain,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn forward(operation);\n\t\t});\n\n\tconst cache = new InMemoryCache().restore(initialState);\n\n\tconst httpLink = new BatchHttpLink({\n\t\turi: process.env.graphQL_uri, // Server URL (must be absolute)\n\t\tcredentials: \"same-origin\", // Additional fetch() options like `credentials` or `headers`\n\t\tfetch,\n\t});\n\n\tconst authLink = setContext((_, { headers }) => {\n\t\t// get the authentication token from local storage if it exists\n\t\tconst _token = \"gika\";\n\t\tconst _domain = \"localhost:3000\";\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t...headers,\n\t\t\t\tauthorization: _token ? `Bearer ${_token}` : \"\",\n\t\t\t\t\"x-origin\": _domain,\n\t\t\t},\n\t\t};\n\t});\n\n\tconst links = [errorLink, authLink, httpLink];\n\tconst link = ApolloLink.from(links);\n\n\treturn new ApolloClient({\n\t\tssrMode: typeof window === \"undefined\", // Disables forceFetch on the server (so queries are only run once)\n\t\tlink: concat(\n\t\t\terrorLink,\n\t\t\tconcat(\n\t\t\t\tmiMiddleware(\"GOOD\"),\n\t\t\t\tnew BatchHttpLink({\n\t\t\t\t\turi: process.env.graphQL_uri, // Server URL (must be absolute)\n\t\t\t\t\tcredentials: \"same-origin\", // Additional fetch() options like `credentials` or `headers`\n\t\t\t\t\tfetch,\n\t\t\t\t})\n\t\t\t)\n\t\t),\n\t\tcache: cache,\n\t\tdefaultOptions: {\n\t\t\twatchQuery: {\n\t\t\t\tfetchPolicy: \"cache-first\",\n\t\t\t},\n\t\t\tquery: {\n\t\t\t\tfetchPolicy: \"cache-first\",\n\t\t\t},\n\t\t},\n\t});\n}\n\nexport function handleApolloError(error) {\n\tconsole.error(JSON.stringify(error)); //debug even more info\n\tlet abort = true;\n\t//use this to filter some benign errors\n\t// filtro Network Errors por aquellos que se dan al perder la conexion a internet\n\t// al filtrar por \"Network Error: failed to fetch\" safari no devolvia ese mensaje de error entonces no filtraba bien en esos casos, ademas el mensaje dependia del lenguaje del dispositivo por lo que eran multiples mensajes a filtrar y podia ser que aparecieran otros mensajes diferentes.\n\t// filtrando los Network Errors tambien filtraba algunos errores importantes como Network Error: ServerError statusCode 500\n\t// por eso tambien se agrego a la condincion que no estuviera online !navigator.onLine\n\tif (\n\t\terror &&\n\t\terror.message &&\n\t\terror.message.match(/Network error/) &&\n\t\ttypeof navigator != \"undefined\" &&\n\t\t!navigator.onLine\n\t) {\n\t\tmessage.open({\n\t\t\tkey: \"noConnection\",\n\t\t\tcontent: <OfflineToastLoader />,\n\t\t\ticon: null,\n\t\t\ttype: null,\n\t\t\tduration: 3,\n\t\t});\n\t} else {\n\t\tSentry.captureException(error);\n\t}\n\treturn abort;\n}\n\nlet isRefreshing = false;\nlet pendingRequests = [];\n\nconst resolvePendingRequests = () => {\n\tconsole.log(\"resolve pending requests\", pendingRequests);\n\tpendingRequests.map(callback => callback());\n\tpendingRequests = [];\n};\n\nconst errorLink = onError(\n\t({ graphQLErrors, networkError, operation, forward, location, ...other }) => {\n\t\tconsole.log(\"On error\");\n\t\tconsole.log(graphQLErrors, networkError, other);\n\t\tConsole.log(\"Query con error: \\x1b[36m\" + operation.operationName + \"\\x1b[0m\");\n\n\t\tif (typeof window === \"undefined\") {\n\t\t\treturn;\n\t\t}\n\n\t\tif (graphQLErrors && graphQLErrors.filter(e => e).length > 0) {\n\t\t\tfor (let err of graphQLErrors) {\n\t\t\t\tif (err.debugMessage && err.debugMessage.includes(\"Unauthenticated\")) {\n\t\t\t\t\tlet forward$;\n\t\t\t\t\tif (!isRefreshing) {\n\t\t\t\t\t\tisRefreshing = true;\n\t\t\t\t\t\tforward$ = fromPromise(\n\t\t\t\t\t\t\topenAuthModal({ withPromise: true })\n\t\t\t\t\t\t\t\t.then(o => {\n\t\t\t\t\t\t\t\t\tconsole.log(\"LOGIN ACEPTADO: \", o);\n\t\t\t\t\t\t\t\t\tif (true) {\n\t\t\t\t\t\t\t\t\t\t//@todo-login\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"COOKIE SETIADA\");\n\t\t\t\t\t\t\t\t\t\tresolvePendingRequests();\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"ALGO SALIO MAL, NO HAY COOKIE\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\t\t\tconsole.log(\"LOGIN RECHAZADO: \", error);\n\t\t\t\t\t\t\t\t\tpendingRequests = [];\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.finally(() => {\n\t\t\t\t\t\t\t\t\tisRefreshing = false;\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t).filter(value => {\n\t\t\t\t\t\t\treturn Boolean(value);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Will only emit once the Promise is resolved\n\t\t\t\t\t\tforward$ = fromPromise(\n\t\t\t\t\t\t\tnew Promise(resolve => {\n\t\t\t\t\t\t\t\tpendingRequests.push(() => resolve());\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn forward$.flatMap(() => {\n\t\t\t\t\t\tconsole.log(\"Forwarding!\");\n\t\t\t\t\t\tconsole.log(operation);\n\t\t\t\t\t\treturn forward(operation);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tSentry.captureException(err);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (networkError) {\n\t\t\tconsole.log(\"Network error: \", networkError);\n\t\t\tmessage.open({\n\t\t\t\tkey: \"noConnection\",\n\t\t\t\tcontent: <OfflineToastLoader />,\n\t\t\t\ticon: null,\n\t\t\t\ttype: null,\n\t\t\t\tduration: 3,\n\t\t\t});\n\t\t}\n\t}\n);\n"]},"metadata":{},"sourceType":"module"}